<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-02-13T14:20:03+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用二叉查找树来进行查找]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios43/"/>
    <updated>2016-02-13T11:18:43+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios43</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>虽然二分法的查找速度快（O(log2n)）,但是有局限条件，就是查找的序列必须有序。  <br/>
除此之外，我们还可以利用二叉查找树来进行查找，如果它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,查找时间的时间复杂度为O(log2n)；但是如果他的结点都集中于某一边，则查找时间的复杂度可能会变为O(n)。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct treeNode {
    int val;
    int position;
    treeNode* left;
    treeNode* right;
    treeNode(int val,int position){
        this-&gt;val = val;
        this-&gt;position = position;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BinarySearchTree {
    treeNode* root = nullptr;

    void add(int value,int position,treeNode* node){
        if (node==nullptr) {
            throw "树为空";
        }

        if (value == node-&gt;val) {
            return;
        }else if(value &lt; node-&gt;val){
            if (node-&gt;left==nullptr) {
                node-&gt;left = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;left);
            }
        }else{
            if (node-&gt;right==nullptr) {
                node-&gt;right = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;right);
            }
        }
    }

    int search(int keyValue,treeNode* node){
        if (node==nullptr) {
            return -1;
        }else if(keyValue &lt; node-&gt;val){
            return search(keyValue, node-&gt;left);
        }else if(keyValue &gt; node-&gt;val){
            return search(keyValue, node-&gt;right);
        }else{
            return node-&gt;position;
        }
    }
    public:

    /**
     *添加结点
     **/
    void add(int value,int position){
        if (root==nullptr) {
            root = new treeNode(value,position);
        }else{
            add(value, position, root);
        }
    }

    /**
     *搜索
     **/
    int search(int keyValue){
        return search(keyValue, root);
    }

};

int main(int argc, const char * argv[]) {

    int a[] = {4,6,3,5,7,2,9,8,10};
    BinarySearchTree* tree = new BinarySearchTree();
    for (int i=0; i&lt;9; i++) {
        tree-&gt;add(a[i], i);
    }

    for (int i=0; i&lt;20; i++) {
        cout&lt;&lt;tree-&gt;search(i)&lt;&lt;endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找算法的实现]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios42/"/>
    <updated>2016-02-13T11:09:21+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios42</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>使用二分查找算法的前提是查找的序列有序。</p>

<h2>递归实现</h2>

<p>代码如下：</p>

<pre><code class="C++">int binary_search01(int start,int end,int key,int a[]){
    if (start&lt;=end) {
        int mid = (start+end)/2;
        if (key&gt;a[mid]) {
            return binary_search01(mid+1, end, key, a);
        }else if(key&lt; a[mid]){
            return binary_search01(start, mid-1, key, a);
        }else{
            return mid;
        }
    }
    return -1;
}
</code></pre>

<h2>非递归实现</h2>

<p>代码如下：</p>

<pre><code class="C++">int binary_search02(int start,int end,int key,int a[]){
    int mid;
    while (start&lt;=end) {
        mid = (start+end)/2;
        if (key&gt;a[mid]) {
            start = mid+1;
        }else if(key&lt; a[mid]){
            end = mid - 1;
        }else{
            return mid;
        }
    }
    return -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八大排序算法--基数排序]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/06/ios33/"/>
    <updated>2016-02-06T22:22:28+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/06/ios33</id>
    <content type="html"><![CDATA[<h2>基数排序</h2>

<p>代码如下</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
/**
 arr 排列的数组
 d 数据的位数 （1,10,100）
 n 数据的个数
 **/
void radixSort(int arr[],int d,int n){
    //当前位数
    int currentD = 1;
    //arr的索引
    int k = 0;
    //10个桶,记得初始化
    int countInBucket[10]  = {0};
    //存储每次桶排序后的结果
    int bucket[10][n];

    while (currentD&lt;d) {
        for (int i=0; i&lt;n; i++) {
            //用于比较的位上的数
            int j = (arr[i]/currentD)%10;
            bucket[j][countInBucket[j]] = arr[i];
            //桶内元素个数+1
            countInBucket[j]++;
        }
        for (int i=0; i&lt;10; i++) {
                //桶内有元素
            if (countInBucket[i]!=0) {
                for (int j =0; j&lt;countInBucket[i]; j++) {
                    arr[k] = bucket[i][j];
                    k++;
                }
            }
            countInBucket[i] = 0;
        }
        k = 0;
        currentD = currentD*10;
    }

}


int main(int argc, const char * argv[]) {
    int a[] = {12,3,1,4,2,5,4,8,5,4,3,9,4,0};
    radixSort(a, 100, 14);
    for (int i=0; i&lt;14; i++) {
        cout&lt;&lt;a[i]&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八大排序算法--归并排序]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/06/ios32/"/>
    <updated>2016-02-06T22:19:21+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/06/ios32</id>
    <content type="html"><![CDATA[<h2>归并排序</h2>

<p>代码如下</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
void mergeArr(int first,int mid,int last,int a[],int tmp[]){
    int i = first;
    int j = mid+1;
    int n = mid ;
    int m = last;
    int k = 0;
    while (i&lt;=n&amp;&amp;j&lt;=m) {
        if (a[i]&lt;a[j]) {
            tmp[k++] = a[i++];
        }else{
            tmp[k++] = a[j++];
        }

    }
    while (i&lt;=n) {
        tmp[k++] = a[i++];
    }
    while(j&lt;=m) {
        tmp[k++] = a[j++];
    }
    for (int i=0; i&lt;k; i++) {
        a[first+i] = tmp[i];
    }
}

void mergeSort(int first ,int last,int a[],int tmp[]){
    if (first&lt;last) {
        int mid = (first+last)/2;
        mergeSort(first, mid, a, tmp);
        mergeSort(mid+1, last, a, tmp);
        mergeArr(first, mid, last, a, tmp);
    }
}

void MergeSort(int n,int a[]){
    int *tmp = new int[n];
    mergeSort(0, n-1, a, tmp);
    delete [] tmp;
}
int main(int argc, const char * argv[]) {
    int a[] = {2,4,1,8,6,7,9};
    MergeSort(7,a);
    for (int i=0; i&lt;7; i++) {
        cout&lt;&lt;a[i]&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八大排序算法--快速排序]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/06/ios31/"/>
    <updated>2016-02-06T22:17:04+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/06/ios31</id>
    <content type="html"><![CDATA[<h2>快速排序</h2>

<p>代码如下</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
//挖坑填坑，分治

//挖坑填坑
//分
void mySwap(int &amp;a,int &amp;b){
    int tmp = a;
    a = b;
    b = tmp;
}

int partition(int start,int end,int a[]){
    //去中间为基准，将它与第一个元素交换
    //swap(a[start], a[(start+end)/2]);
    int i = start;
    int j = end;
    int x = a[start];
    while (i&lt;j) {
        while (i&lt;j&amp;&amp;a[j]&gt;=x) {
            j--;
        }
        if (i&lt;j) {
            //挖坑填坑
            a[i] = a[j];
            i++;
        }
        while (i&lt;j&amp;&amp;a[i]&lt;x) {
            i++;
        }
        if (i&lt;j) {
            a[j] = a[i];
            j--;
        }
    }
    a[i] = x;
    return i;
}

//治
void quickSort(int low,int high,int a[]){
    if (low&lt;high) {
        int p = partition(low, high, a);
        quickSort(low, p-1, a);
        quickSort(p+1, high, a);
    }
}


void QuickSort(int n,int a[]){
    quickSort(0, n-1, a);
}

int main(int argc, const char * argv[]) {
    int a[] = {1,4,2,8,7,9,6};
    QuickSort(7, a);
    for (int i=0; i&lt;7; i++) {
        cout&lt;&lt;a[i]&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
