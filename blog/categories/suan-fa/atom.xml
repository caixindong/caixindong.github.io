<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-05-15T16:18:23+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[斐波那契数列]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/24/ios61/"/>
    <updated>2016-02-24T18:29:04+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/24/ios61</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci[1]  ），指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）</p>

<h2>求斐波那契数列中第n个数</h2>

<h3>递归解法(缺点:时间复杂度很大，非多项式时间)</h3>

<pre><code class="C++">unsigned long long fb(int n){
    if (n&lt;2) {
        return n;
    }else{
        return fb02(n-1)+fb02(n-2);
    }

}
</code></pre>

<h3>动态规划解法(时间复杂度为O(n))</h3>

<pre><code class="C++">unsigned long long fb(int n){
    if (n&lt;2) {
        return n;
    }else{
        unsigned long long* a = new unsigned long long[n+1];
        a[0] = 0;
        a[1] = 1;
        for (int i = 2; i&lt;=n; i++) {
            a[i] = a[i-1]+a[i-2];
        }
        return a[n];
    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[01背包问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/24/ios60/"/>
    <updated>2016-02-24T16:54:00+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/24/ios60</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>已知:有一个容量为W的背包和N件物品，第i件物品的重量是weight[i]，收益是cost[i]。  <br/>
限制:每种物品只有一件，可以选择放或者不放  <br/>
问题:在不超过背包容量的情况下，最多能获得多少价值或收益</p>

<h2>算法思路</h2>

<p>我们定义一个数据结构f[i][j],它代表前i个物品在j容量下的最大价值。  <br/>
问题可以转化为解决这样的一个子问题，前i-1件物品已放入背包中，我们只考虑第i件物品的放入情况，如果不放则f[i][j] = f[i-1][j]；如果放入则f[i][j] = f[i-1][j-weight[i]]+cost[i],我们通过比较这两种情况f值得大小，来决定这件物品该不该放入</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;climits&gt;
using namespace std;

int MAX(int a,int b){
    return a&gt;b?a:b;
}

/**
 * 时间复杂度为O(N*W)
 * 空间复杂度为O(N*W)
 **/
int _01Package(int* weight,int* cost, int N, int W){
    int f[N+1][W+1];
    memset(f, 0, sizeof(f));
    for (int i=1; i&lt;=N; i++) {
        for (int j = 0; j &lt;=W; j++) {
            f[i][j] = f[i-1][j];
            if (weight[i]&lt;=j) {
                f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]+cost[i]);
            }
        }
    }
    return f[N][W];
}



int main(int argc, const char * argv[]) {
    const int N = 3;//物品个数
    const int V = 5;//背包最大容量
    int weight[N + 1] = {0,3,2,2};//物品重量
    int value[N + 1] = {0,5,10,20};//物品价值
    cout&lt;&lt;_01FillPackage02(weight, value, N, V)&lt;&lt;endl;
    return 0;
}
</code></pre>

<h2>优化空间复杂度</h2>

<pre><code class="C++">/**
 * 优化空间复杂度
 * 空间复杂度为O(W)
 **/
int _01Package02(int* weight,int* cost, int N,int W){
    int f[W+1];
    memset(f, 0, sizeof(f));
    for (int i=1; i&lt;=N; i++) {
        for (int j = W; j&gt;=weight[i]; j--) {
            f[j] = MAX(f[j], f[j-weight[i]]+cost[i]);
        }
    }
    return f[W];
}
</code></pre>

<p>逆序枚举容量的原因：
上面那种做法实际上是根据方程f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]演化而来，当到达第i次循环时，在计算f[j]之间，f[j]已经保存上次循环求得的f值，即实际上在计算f[j]之前，f[j] = f[i-1][j],如果是顺序枚举容量，则此时f[j-weight[i]]+cost[i]实际上是f[i][j-weight[i]]+cost[i],则不符合题意，其实相当于重复装入某件物品，如果是解决完全背包问题，顺序枚举容量是最简洁的解决方案。</p>

<h2>问题延伸</h2>

<p>当前问题不要求把背包装满，如果把背包装满，那怎么解决呢？  <br/>
其实解法跟上面问题的解法一样，只是在f数组的初始化上面有所不同。要求把背包装满，只有容量为0的背包时有合法解，价值为0，其他的容量均没有合法解，属于未定义状态，应该被复制为负无穷。</p>

<h4>代码实现</h4>

<pre><code class="C++">int _01FillPackage(int* weight,int* cost, int N, int W){
    int f[N+1][W+1];
    //注意初始化
    for (int i=0; i&lt;=N; i++) {
        for (int j = 0; j&lt;=W; j++) {
            f[i][j] = INT_MIN;
        }
    }

    for (int i=0; i&lt;=N; i++) {
        f[i][0] = 0;
    }
    for (int i=1; i&lt;=N; i++) {
        for (int j = 0; j &lt;=W; j++) {
            f[i][j] = f[i-1][j];
            if (weight[i]&lt;=j) {
                f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]+cost[i]);
            }
        }
    }
    return f[N][W];
}

int _01FillPackage02(int* weight,int* cost, int N,int W){
    int f[W+1];
    //注意初始化
    for (int i = 0; i&lt;=W;i++) {
        f[i] = INT_MIN;
    }
    f[0] = 0;
    for (int i=1; i&lt;=N; i++) {
        for (int j = W; j&gt;=weight[i]; j--) {
            f[j] = MAX(f[j], f[j-weight[i]]+cost[i]);
        }
    }
    return f[W];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用二叉查找树来进行查找]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios43/"/>
    <updated>2016-02-13T11:18:43+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios43</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>虽然二分法的查找速度快（O(log2n)）,但是有局限条件，就是查找的序列必须有序。  <br/>
除此之外，我们还可以利用二叉查找树来进行查找，如果它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,查找时间的时间复杂度为O(log2n)；但是如果他的结点都集中于某一边，则查找时间的复杂度可能会变为O(n)。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct treeNode {
    int val;
    int position;
    treeNode* left;
    treeNode* right;
    treeNode(int val,int position){
        this-&gt;val = val;
        this-&gt;position = position;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BinarySearchTree {
    treeNode* root = nullptr;

    void add(int value,int position,treeNode* node){
        if (node==nullptr) {
            throw "树为空";
        }

        if (value == node-&gt;val) {
            return;
        }else if(value &lt; node-&gt;val){
            if (node-&gt;left==nullptr) {
                node-&gt;left = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;left);
            }
        }else{
            if (node-&gt;right==nullptr) {
                node-&gt;right = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;right);
            }
        }
    }

    int search(int keyValue,treeNode* node){
        if (node==nullptr) {
            return -1;
        }else if(keyValue &lt; node-&gt;val){
            return search(keyValue, node-&gt;left);
        }else if(keyValue &gt; node-&gt;val){
            return search(keyValue, node-&gt;right);
        }else{
            return node-&gt;position;
        }
    }
    public:

    /**
     *添加结点
     **/
    void add(int value,int position){
        if (root==nullptr) {
            root = new treeNode(value,position);
        }else{
            add(value, position, root);
        }
    }

    /**
     *搜索
     **/
    int search(int keyValue){
        return search(keyValue, root);
    }

};

int main(int argc, const char * argv[]) {

    int a[] = {4,6,3,5,7,2,9,8,10};
    BinarySearchTree* tree = new BinarySearchTree();
    for (int i=0; i&lt;9; i++) {
        tree-&gt;add(a[i], i);
    }

    for (int i=0; i&lt;20; i++) {
        cout&lt;&lt;tree-&gt;search(i)&lt;&lt;endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找算法的实现]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios42/"/>
    <updated>2016-02-13T11:09:21+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios42</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>使用二分查找算法的前提是查找的序列有序。</p>

<h2>递归实现</h2>

<p>代码如下：</p>

<pre><code class="C++">int binary_search01(int start,int end,int key,int a[]){
    if (start&lt;=end) {
        int mid = (start+end)/2;
        if (key&gt;a[mid]) {
            return binary_search01(mid+1, end, key, a);
        }else if(key&lt; a[mid]){
            return binary_search01(start, mid-1, key, a);
        }else{
            return mid;
        }
    }
    return -1;
}
</code></pre>

<h2>非递归实现</h2>

<p>代码如下：</p>

<pre><code class="C++">int binary_search02(int start,int end,int key,int a[]){
    int mid;
    while (start&lt;=end) {
        mid = (start+end)/2;
        if (key&gt;a[mid]) {
            start = mid+1;
        }else if(key&lt; a[mid]){
            end = mid - 1;
        }else{
            return mid;
        }
    }
    return -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八大排序算法--基数排序]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/06/ios33/"/>
    <updated>2016-02-06T22:22:28+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/06/ios33</id>
    <content type="html"><![CDATA[<h2>基数排序</h2>

<p>代码如下</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
/**
 arr 排列的数组
 d 数据的位数 （1,10,100）
 n 数据的个数
 **/
void radixSort(int arr[],int d,int n){
    //当前位数
    int currentD = 1;
    //arr的索引
    int k = 0;
    //10个桶,记得初始化
    int countInBucket[10]  = {0};
    //存储每次桶排序后的结果
    int bucket[10][n];

    while (currentD&lt;d) {
        for (int i=0; i&lt;n; i++) {
            //用于比较的位上的数
            int j = (arr[i]/currentD)%10;
            bucket[j][countInBucket[j]] = arr[i];
            //桶内元素个数+1
            countInBucket[j]++;
        }
        for (int i=0; i&lt;10; i++) {
                //桶内有元素
            if (countInBucket[i]!=0) {
                for (int j =0; j&lt;countInBucket[i]; j++) {
                    arr[k] = bucket[i][j];
                    k++;
                }
            }
            countInBucket[i] = 0;
        }
        k = 0;
        currentD = currentD*10;
    }

}


int main(int argc, const char * argv[]) {
    int a[] = {12,3,1,4,2,5,4,8,5,4,3,9,4,0};
    radixSort(a, 100, 14);
    for (int i=0; i&lt;14; i++) {
        cout&lt;&lt;a[i]&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
