<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据结构 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/shu-ju-jie-gou/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-02-14T13:58:47+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[判断是否是回文字符串]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios49/"/>
    <updated>2016-02-14T13:41:59+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios49</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>判断是否是回文字符串</p>

<h2>做法</h2>

<p>先将字符串转化为小写字符串，接着初始化一个头指针和尾指针，遍历字符串，遍历的时候注意字符是否是‘1’~‘9’或‘a’~&lsquo;z'，如果不是就跳过遍历。如果头尾指针遍历到的字符不同就返回false，否则继续遍历。</p>

<h2>代码实现</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
using namespace::std;
class Solution {
public:

    /**
    * 判断是否是1~9或a~b之中的字符
    **/
    bool isNormalChar(char c){
        if (('a'&lt;=c&amp;&amp;c&lt;='z')||('0'&lt;=c&amp;&amp;c&lt;='9')) {
            return true;
        }
        return false;
    }

    bool isPalindrome(string s) {
        if (s.length()&lt;=1) {
            return true;
        }
        //将字符串中的大写转化为小写
        transform(s.begin(), s.end(), s.begin(),::tolower);
        int n = (int)s.length();
        int i = 0;
        int j = n-1;
        while (i&lt;j) {
            if (s[i]==s[j]) {
                i++;
                j--;
            }else{
                if (!isNormalChar(s[i])) {
                    i++;
                }else if(!isNormalChar(s[j])){
                    j--;
                }else{
                    return false;
                }
            }
        }
        return true;
    }
};
int main(int argc, const char * argv[]) {
    Solution* s = new Solution();
    cout&lt;&lt;s-&gt;isPalindrome("ab")&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断是否是回文数字]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios48/"/>
    <updated>2016-02-14T12:07:13+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios48</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>什么是回文？  <br/>
回文就是正着读、反着读都一样的字符串，例如：“心连心”、“abccba”、“bcdcb”、“123321” 这些都是回文。</p>

<h2>要求</h2>

<p>判断一个数字是否是回文数字</p>

<h2>做法</h2>

<p>判断数字的每一位是否对称</p>

<h2>代码如下</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
#include &lt;math.h&gt;
using namespace std;
class Solution {
public:
    /**
    *计算数字的位数
    **/
    int wei(int x){
        int count = 0;
        while (x&gt;0) {
            x = x/10;
            count++;
        }
        return count;
    }

    /**
    *   判断
    **/
    bool isPalindrome(int x) {
        if (x&lt;0) {
            return false;
        }
        if (x&gt;=0&amp;&amp;x&lt;10) {
            return true;
        }else{
            int n = wei(x);
            int t = (int)pow(10,n-1);
            int tmp = x;
            int half = n/2;
            for(int i=0;i&lt;half;i++){
                if (x/t%10==tmp%10) {
                    t = t/10;
                    tmp = tmp/10;
                }else{
                    return false;
                }
            }
            return true;
        }
    }
};

int main(int argc, const char * argv[]) {
    Solution* s =  new Solution();
    cout&lt;&lt;s-&gt;isPalindrome(1221)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断一颗树是否是平衡二叉树]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios47/"/>
    <updated>2016-02-14T11:21:07+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios47</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>判断一个树是否是平衡二叉树，何为平衡二叉树，就是它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>

<h2>做法</h2>

<p>由要求可看出判断一颗树是否是平衡二叉树的依据就是每个节点的左右子树的高度(深度)差的绝对值不超过1，那么我们可以通过计算节点的深度来判断，那如何计算节点的深度呢？我们发现树有个特点就是父节点的深度是子节点深度的最大值加1，由这个特点，我们可以计算节点的深度</p>

<h2>代码如下</h2>

<p>我提供两种代码思路</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;


  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };

class Solution {
public:

    /**
     *方法一
     * 传统方法，计算每个节点的深度判断，时间复杂度为O(n^2)
     **/
    int depth(TreeNode* node){
        if (node==nullptr) {
            return 0;
        }else if(!node-&gt;left&amp;&amp;!node-&gt;right){
            return 1;
        }
        else{
            int leftD = depth(node-&gt;left);
            int rightD = depth(node-&gt;right);
            return 1+(leftD&gt;rightD?leftD:rightD);
        }
    }
    bool isBalanced(TreeNode* root) {
        if (root==nullptr) {
            return true;
        }else{
            int leftD = depth(root-&gt;left);
            int rightD = depth(root-&gt;right);
            if (abs(leftD-rightD)&gt;1) {
                return false;
            }else{
                return isBalanced(root-&gt;left)&amp;&amp;isBalanced(root-&gt;right);
            }
        }
    }

    /**
     *方法二
     * 边计算深度边判断，时间复杂度为O(n)
     **/
    int depth2(TreeNode* node){
        if (node==nullptr) {
            return 0;
        }else{
            int leftD = depth2(node-&gt;left);
            int rightD = depth2(node-&gt;right);
            if (leftD==-1||rightD==-1||abs(leftD-rightD)&gt;1) {
                return -1;
            }else{
                return (leftD&gt;rightD?leftD:rightD)+1;
            }
        }
    }
    bool isBanlanced2(TreeNode* root){
        if (root==nullptr) {
            return true;
        }else{
            if (depth2(root)==-1) {
                return false;
            }else{
                return true;
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[表达式求值问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios46/"/>
    <updated>2016-02-13T14:45:50+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios46</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>我们给出一个表达式，将它转化为逆波兰式，传给树求值，例如1+2+3 转化为 12+3+</p>

<h2>做法</h2>

<p><code>匹配：</code> 初始化一个栈stack，然后遍历这个逆波兰式的字符串，如果遇到数字，则以这个数字的值生成一个新的树节点，将这个节点入栈；如果遇到操作符，就以操作符为值生成一个新的树节点，弹栈弹出一个节点作为该新节点的右孩子节点，再弹出一个节点作为该新节点的左孩子节点，最后将该新节点入栈。遍历结束后，判断栈里的元素个数是否为1，如果为1则匹配成功；如果不为1则逆波兰式是非法的。  <br/>
<code>求值：</code> 遍历树进行求值，具体做法看代码。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;
struct treeNode{
    char val;
    treeNode* left;
    treeNode* right;
    treeNode(char val){
        this-&gt;val = val;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BSTree{
    treeNode* root;
public:
    BSTree(){
        root = nullptr;
    }
    /**
     *解析表达式字符串
     **/
    void parse(char str[]){
        const char* p = str;
        stack&lt;treeNode*&gt; stack;
        while (*p != '\0') {
            if (*p&gt;='0' &amp;&amp; *p&lt;='9') {
                stack.push(new treeNode(*p));
            }else{
                treeNode* newNode = new treeNode(*p);
                treeNode* rightNode = stack.top();
                stack.pop();
                newNode-&gt;right = rightNode;
                treeNode* leftNode = stack.top();
                stack.pop();
                newNode-&gt;left = leftNode;
                stack.push(newNode);
            }
            p++;
        }
        if (stack.size()!=1) {
            cout&lt;&lt;"Illegal expression";
            root = nullptr;
        }else{
            root = stack.top();
        }


    }
    /**
     *计算表达式的值
     **/
    int evaluate(){
        if (root==nullptr) {
            cout&lt;&lt;" ";
            //如果表达式不规范返回int最小值
            return numeric_limits&lt;int&gt;::min();
        }else{
            return evaluate(root);
        }
    }
private:
    int evaluate(treeNode* node){
        switch (node-&gt;val) {
            case '+':
                return evaluate(node-&gt;left)+evaluate(node-&gt;right);

            case '-':
                return evaluate(node-&gt;left)-evaluate(node-&gt;right);

            case '*':
                return evaluate(node-&gt;left)*evaluate(node-&gt;right);

            case '/':
                return evaluate(node-&gt;left)/evaluate(node-&gt;right);
                ;
                //叶子节点
            default:
                return node-&gt;val - '0';
                ;
        }

    }
};

int main(int argc, const char * argv[]) {
    BSTree tree;
    tree.parse("44+22+/");
    cout&lt;&lt;tree.evaluate()&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的BFS遍历(非递归)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios45/"/>
    <updated>2016-02-13T14:35:24+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios45</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>我们可以利用队列先进先出的特点对我们树进行广度优先遍历。</p>

<h2>代码实现：</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

template&lt;class T&gt;
struct TreeNode {
    T val;
    TreeNode&lt;T&gt;* left;
    TreeNode&lt;T&gt;* right;
    TreeNode(T val){
        this-&gt;val = val;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};

template&lt;class T&gt;
void BFSTravel(TreeNode&lt;T&gt;* node){
    queue&lt;TreeNode&lt;T&gt;*&gt; queue;
    queue.push(node);
    while (!queue.empty()) {
        TreeNode&lt;T&gt;* currentNode = queue.front();
        cout&lt;&lt;currentNode-&gt;val&lt;&lt;endl;
        queue.pop();
        if (currentNode-&gt;left) {
            queue.push(currentNode-&gt;left);
        }
        if(currentNode-&gt;right){
            queue.push(currentNode-&gt;right);
        }
    }

}

int main(int argc, const char * argv[]) {
    TreeNode&lt;int&gt;* root = new TreeNode&lt;int&gt;(10);
    TreeNode&lt;int&gt;* node1 = new TreeNode&lt;int&gt;(1);
    TreeNode&lt;int&gt;* node2 = new TreeNode&lt;int&gt;(2);
    TreeNode&lt;int&gt;* node3 = new TreeNode&lt;int&gt;(3);
    TreeNode&lt;int&gt;* node4 = new TreeNode&lt;int&gt;(4);
    root-&gt;left = node1;
    root-&gt;right = node3;
    node3-&gt;left = node2;
    node3-&gt;right = node4;
    BFSTravel(root);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
