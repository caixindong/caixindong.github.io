<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2015-10-04T11:43:30+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS多线程（NSOperation）(swift)]]></title>
    <link href="http://caixindong.github.io/blog/2015/10/04/ios4/"/>
    <updated>2015-10-04T11:29:28+08:00</updated>
    <id>http://caixindong.github.io/blog/2015/10/04/ios4</id>
    <content type="html"><![CDATA[<p>NSOperation</p>

<p>相比于gcd，它更好地控制和处理大量的并发操作.
NSOperation 封装了需要的代码,NSOperation是抽象基类，一般我们使用系统提供的子类或者自定义子类来继承它.
NSOperationQueue是操作队列，专门用来调度和管理NSOperation.</p>

<p>1、创建一个系统提供的nsoperation</p>

<pre><code>let myoperation = NSBlockOperation { 
    () -&gt;Voidin
        //操作
    }
</code></pre>

<p>2、创建一个nsoperationqueue,并添加nsoperation,这样nsoperation对象就会执行</p>

<pre><code>NSOperationQueue().addOperation(myoperation)
</code></pre>

<p>3、不使用nsoperationqueue执行，，也可这样执行，不过这个操作时同步的，一般不推荐这种方法，一般用与nsoperationqueue相结合使用的方法</p>

<pre><code>myoperation.start()
myoperation.cancel()//取消操作
</code></pre>

<p>4、nsoperation回调</p>

<pre><code>myoperation.completionBlock = { 
    }
</code></pre>

<p>5、在原有的nsoperation再添加操作，nsoperation里面的操作时并行的</p>

<pre><code>myoperation.addExecutionBlock { () -&gt;Voidin
        //第二个操作
    }
</code></pre>

<p>6、自定义nsoperation，即实现main（）方法</p>

<pre><code>import UIKit
protocol opCompletionDelegate{//代理
func opCompletion()
}
class wkoperation: NSOperation {
var delegate:opCompletionDelegate?//运用代理通知类中的主线程更新ui
overridefunc main() {
    super.main()
    //操作
    if let mydelegate =self.delegate{
        mydelegate.opCompletion()
    }
  }
}
//调用的类：
let myoperation1 =wkoperation()
myoperation1.delegate =self
NSOperationQueue().addOperation(myoperation1)
}
func opCompletion() {

}
</code></pre>

<p>7、依赖关系</p>

<pre><code>myoperation.addDependency(myoperation1)
//myoperation依赖于myoperation1，myoperation1执行完再执行myoperation

myoperation.removeDependency(myoperation1)  //移除依赖
</code></pre>

<p>8、设置优先级，并不一定能保证系统按照优先级的顺序执行，只是让系统分配资源的时候更倾向于优先级高的</p>

<pre><code>myoperation.queuePriority =NSOperationQueuePriority.VeryLow
</code></pre>

<p>9、设置队列并行的最大操作数，等于1相当于串行</p>

<pre><code>let myoperationqueue =NSOperationQueue()
    myoperationqueue.maxConcurrentOperationCount =2
</code></pre>

<p> 10、一直等到操作执行完</p>

<pre><code>myoperation.waitUntilFinished()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS多线程（GCD)(swift)]]></title>
    <link href="http://caixindong.github.io/blog/2015/10/04/ios3/"/>
    <updated>2015-10-04T11:10:31+08:00</updated>
    <id>http://caixindong.github.io/blog/2015/10/04/ios3</id>
    <content type="html"><![CDATA[<h1>实现iOS多线程主要有三种方式</h1>

<p>一、GCD</p>

<p>他是苹果设计的在底层管理线程的方法
GCD最主要的概念就是队列，可分为两种类型，一为串行队列，二为并行队列，开发时用到的有三种队列：主队列、全局队列、自定义队列</p>

<p>1、创建gcd队列</p>

<pre><code>let myQueue:dispatch_queue_t =dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0)

//第一个参数是优先级
//用异步方式执行队列里的方法      
dispatch_async(myQueue, { () -&gt;Void in
        //任务
    })
</code></pre>

<p>2、自定义队列</p>

<pre><code>let myqueue2:dispatch_queue_t = dispatch_queue_create("xindong.com",
DISPATCH_QUEUE_CONCURRENT)
//最后一个参数指的是并行的队列，还有一个是DISPATCH_QUEUE_SERIAL(串行)
</code></pre>

<p>3、延迟执行</p>

<pre><code>let myTime:dispatch_time_t=dispatch_time(DISPATCH_TIME_NOW, 
(Int64)(NSEC_PER_SEC*2))
//后面那个参数代表两秒，苹果公司建议这样写，这是转化为gcd能读懂的时间

dispatch_after(myTime,dispatch_get_main_queue(), { () -&gt;Void in
        //任务
    })//苹果公司建议用主队列

4、多次执行
    dispatch_apply(3,dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0))
     { (UInt index) -&gt; Voidin
        //任务
    }//执行3次，一般放在并行队列中
    //他是一个同步操作会阻塞主线程，所以一般放在异步执行的代码里
</code></pre>

<p>5、调度组</p>

<pre><code>    let mygroup =dispatch_group_create()//创建调度组
    dispatch_group_async(mygroup, myQueue) { () -&gt;Void in
    //异步执行调度组里面的内容
        //加载图片数据
        dispatch_async(dispatch_get_main_queue(), { () -&gt;Void in
            //主线程更新ui
        })
    }       dispatch_group_notify(mygroup,dispatch_get_main_queue()) { () -&gt;Void in
        //这个方法在调度组里面的内容全部执行完毕后调用
    }

dispatch_group_wait(mygroup,DISPATCH_TIME_FOREVER)
//一直等到调度组执行完，在执行下面的，这是一个同步操作，会阻塞主线程
</code></pre>

<p>6、暂停队列</p>

<pre><code>dispatch_suspend(myQueue)//不能暂停主队列和系统队列
</code></pre>

<p>7、恢复队列</p>

<pre><code>    dispatch_resume(myQueue)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS TableView]]></title>
    <link href="http://caixindong.github.io/blog/2015/10/04/ios2/"/>
    <updated>2015-10-04T00:51:03+08:00</updated>
    <id>http://caixindong.github.io/blog/2015/10/04/ios2</id>
    <content type="html"><![CDATA[<h1>iOS TableView 的header for section无法加载的问题</h1>

<p>最近在练习的一个项目遇到重写header不加载的问题，在这里提醒下大家，重写的header要被调用，一定要重写delegate的height for header的方法才会被调用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS OC知识点]]></title>
    <link href="http://caixindong.github.io/blog/2015/10/04/ios1/"/>
    <updated>2015-10-04T00:46:33+08:00</updated>
    <id>http://caixindong.github.io/blog/2015/10/04/ios1</id>
    <content type="html"><![CDATA[<h1>OC知识点</h1>

<p>1、类的设计</p>

<p>@property （nonatomic ，strong）NSString* __(NSString用strong，跟oc有关的夜用strong)</p>

<p>@property （nonatomic ，assign）int age (其他用assign)</p>

<p>2、封装</p>

<p>3、继承</p>

<p>4、重写</p>

<p>5、self指针（类似java的this）</p>

<p>6、类别（区别于继承）</p>

<p>相同目的：都是无法满足需求，需要更新属性或方法拓展</p>

<p>不同点：继承即能拓展成员变量，成员属性，也能够添加方法；类别，只能添加方法</p>

<p>继承添加的新方法新属性，都是在子类对象中调用，而类别添加的新方法可以在原类对象直接调用</p>

<p>7、内存管理（mrc模式和arc模式）</p>

<p>8、代理（delegate委托，类似java的接口）</p>

<p>9、copy（浅拷贝和深拷贝）</p>

<p>浅拷贝还是指向原来的内存空间，而深拷贝则另外开辟新的空间</p>

<p>10、单例设计模式（全局变量）</p>

<p>遇到多线程时要加锁@synchronized（self）｛</p>

<p>｝</p>

<p>只执行一次可以加上dispatch_once(&hellip;,&hellip;.)</p>

<p>11、通知中心设计模式（broadcost）</p>

<p>一般用单例实现广播栈</p>

<p>NSNotificationCenter</p>

<p>12、block（代码块）</p>

<p>int(^myblock) = ^(int a,int b){</p>

<p>};
myblock(3,5);</p>
]]></content>
  </entry>
  
</feed>
