<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 栈与队列 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/zhan-yu-dui-lie/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-02-29T22:22:46+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第n个丑数]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/08/ios38/"/>
    <updated>2016-02-08T14:07:50+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/08/ios38</id>
    <content type="html"><![CDATA[<h2>前言：</h2>

<p><code>1.</code> 何为丑数？  <br/>
丑数，就是只含有2、3、5三个因子的正整数。  <br/>
<code>2.</code> 如何让判断丑数？  <br/>
一个数先被2整除，直到不能被2整除，再被3整除，直到不能被3整除，再被5整除，直到不能被5整除，除到最后如果只剩下1则为丑数，否则不为丑数  <br/>
<code>3.</code> 判断丑数代码实现如下：</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
class Solution {
public:
    bool isUgly(int num) {
          if (num==0) {
            return false;
        }else if(num==1){
            return true;
        }else{

            int tmp = num;
            while (tmp%2 == 0) {
                tmp = tmp/2;
            }
            while (tmp%3 == 0) {
                tmp = tmp/3;
            }
            while (tmp%5 == 0) {
                tmp = tmp/5;
            }
            if (tmp==1) {
                return true;
            }else{
                return false;
            }

        }
    }
};
</code></pre>

<h2>问题要求：</h2>

<p>例如1, 2, 3, 4, 5, 6, 8, 9, 10, 12 为前10个丑数，求第n个丑数</p>

<h2>做法：</h2>

<p><code>1.</code> 我们可以利用队列来帮助我们解决问题，首先我们需要3个队列q2、q3、q5，这三个队列分别存储能被2、3、5整除的整数；  <br/>
<code>2.</code> 1为第一个丑数，我们用p来记录当前的丑数，求第n个丑数，则循环n-1次以下操作：首先2*p、3*p、5*p分别插入q2、q3、q5队列，取各个队头元素获取他们之中的最小值，该最小值也是该次循环的丑数，再判断各个队头元素是否与这个最小值相等，如果相等则出队，再将该最小值赋值为p；  <br/>
<code>3.</code> 循环结束，p就是第n个丑数；</p>

<h2>代码实现：</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;
class Solution {
public:
    int min1(int a,int b){
        return a&lt;b?a:b;
    }

    int nthUglyNumber(int n) {
        if (n&lt;=0) {
            return -1;
        }else if (n==1) {
            return 1;
        }else{
            queue&lt;int&gt; q2;
            queue&lt;int&gt; q3;
            queue&lt;int&gt; q5;
            int i = 1;
            int p = 1;
            while (i&lt;n) {
                q2.push(p*2);
                q3.push(p*3);
                q5.push(p*5);
                int min2 = q2.front();
                int min3  = q3.front();
                int min5 = q5.front();
                int min = min1(min1(min2, min3), min5);
                if (min2==min) {
                    q2.pop();
                }
                if (min3==min) {
                    q3.pop();
                }
                if (min5==min) {
                    q5.pop();
                }
                p = min;
                i++;
            }
            return p;
        }
    }
};
int main(int argc, const char * argv[]) {
    // insert code here...
    Solution* s = new Solution();
    cout&lt;&lt;s-&gt;nthUglyNumber(4)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[路径简化问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/08/ios37/"/>
    <updated>2016-02-08T13:15:41+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/08/ios37</id>
    <content type="html"><![CDATA[<h2>要求：</h2>

<p>给定一个UNIX风格的全路径，简化它，例如：  <br/>
“/home/”  =>  &ldquo;/home&rdquo;  <br/>
&ldquo;/a/./b/../../c/&rdquo;  =>  &ldquo;/c&rdquo;</p>

<h2>做法：</h2>

<p><code>1.</code> &ldquo;."指的是当前目录，&rdquo;..&ldquo;指的是上级目录，"cd / &rdquo; 则是返回根目录；  <br/>
<code>2.</code> 初始化一个vector1，我们将这个全路径按 “/” 分割，存储在vector1里；  <br/>
<code>3.</code> 然后初始化另一个vector2，遍历这个vector1，遇到文件夹，则将它添加到vector2的尾部，遇到 &ldquo;..&rdquo; 则删除vector2的尾部的元素，如遇到 “” 或 “ . ” 则跳过继续遍历，根据这个特点，也可以用栈来实现；  <br/>
<code>4.</code> 最后将vector2输出，拼接字符串；</p>

<h2>代码实现：</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
using namespace std;
class Solution {
public:
    void spilt(const char* str,const char* deli,vector&lt;string&gt;* ve,int n){
        char tmp[n+1];
        snprintf(tmp, sizeof(tmp), str);
        ve-&gt;clear();
        char* gg;
        char* p  = strtok_r(tmp, deli, &amp;gg);
        while (p!=NULL) {
            ve-&gt;push_back(p);
            p = strtok_r(NULL, deli, &amp;gg);
        }


    }

    string simplifyPath(string path) {
        vector&lt;string&gt; ve;
        vector&lt;string&gt; newVe;
        //字符串转化为char*
        const char* str = path.c_str();
       spilt(str, "/", &amp;ve,(int)path.length());
        int n = (int)ve.size();
        for (int i = 0; i&lt;n; i++) {
            if (ve[i]==""||ve[i]==".") {
                continue;
            }else{
                if (ve[i]=="..") {
                    if (!newVe.empty()) {
                        newVe.pop_back();
                    }
                }else{
                    newVe.push_back(ve[i]);
                }

            }
        }
        if (newVe.empty()) {
            return "/";
        }else{
            int m = (int)newVe.size();
            string newStr = "";
            for (int i=0; i&lt;m; i++) {
                newStr = newStr+"/"+newVe[i];
            }

            return newStr;
        }
    }
};


int main(int argc, const char * argv[]) {
    Solution* s = new Solution();
    cout&lt;&lt;s-&gt;simplifyPath("///HSGambA/..///DLCkPZxIAWDX/iIQIncFWSaMLG/././RVOlTgYl/NnTHKiAVWVCPCARqna///lxbPdAlgTC/eXBfVOBuPbBRb/////iy///../gE/MoNMalkJgUChQbXuRogz/./../FkR/././././GtP///./..///CAiQtMuRub/xOcs/RtEkqhqCLZAkCzdX/////SNMEIs/cyneqrDxUosUhcGAB/bPHrLgioq/./HhFgLUjEFrg/nKlbXBRicXjxNBLD/.///.///LIUAUsBU/kTqEWZYpIdRRxDV/////pLjoiqd/mMgSebGPyZ/./VQAErxTVbJtFGJ/wyeOwQUEwz/../.././//d/../../qmYZmdXO///liGrmA/.././../Cc///tOLsCMtVJcDDKcuPM///./fywuWZOHnln/UjepoOdc/CVSRAwOielKl/../ExXI/SYsxkdfeRHPuRZhsRrQc/./RxruFyUPeisM/../uyGh/EjJsGlCLKMpnzS/SYoyFtsznGK/./mnbKK/../SLAKsHcouXPKSQwJa/./../NPn/kHeVSrDVVfhv/P/../CSXZeqLgJOLbyZZNiJGa/L///AOldPsSFIZqKKixZQ/evwGyGJhoKvvyot/pWtiAkFrvnLTbZZT/EkKrRJyXmNoUWCDr/qHgRjqETRtMfrX/WZxvvGRWclANrbuLuu///xBOFLDmoQtYQhjK/../MCRZBSWX/IYshVeeYGeHEPAsDYDp///pNnHlXfOQCVJu/../Ux/../HFaPOmbhjNq/OXRFgVU/uxMsClzPA/./cPlqKKvZNAQKzwFL///uvKKsZoHjZArQQ/DJruUeMYHMlhKPkFMy/NqdCweXujNHGJTL/tjhFFsOMeXWlNeDJjf/EeWUzIHmqfS/.././DDmiy///.././EqjhEiYgVbHo/NTvBQ/././//../nMzJgmVGcMlZgTQhwC/.///MXtPzGrZEB/WynGrD/////../PidAvghpCyxRYQRKaZEF/../mtoy//")&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[括号匹配问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/08/ios36/"/>
    <updated>2016-02-08T10:34:21+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/08/ios36</id>
    <content type="html"><![CDATA[<h1>新年到了，恭祝大家新年快乐</h1>

<h2>今天解决括号匹配问题</h2>

<h2>要求：</h2>

<p>给定一个字符串，判断它是否括号匹配，'(&lsquo;和&rsquo;)&lsquo;匹配，&rsquo;[&lsquo;和&rsquo;]&lsquo;匹配，&rsquo;{&lsquo;和&rsquo;}&lsquo;匹配，成对出现。例如："( [ [ ] ] )&ldquo;括号匹配，而&rdquo;[ [ ( ( ) )&ldquo;则不匹配。</p>

<h2>做法：</h2>

<p><code>1.</code> 既然要括号匹配，那么奇数长度的字符串一定是不匹配的，而且后出现的符号先匹配，由此我们可以联想到栈后进先出的特点，所以这道题利用栈来解决；  <br/>
<code>2.</code> 遍历字符串，如果遇到了'(&lsquo; , &rsquo;[&lsquo; , &rsquo;{&lsquo;则将它们压栈，如果遇到&rsquo;)&lsquo; , &rsquo;]&lsquo; , &rsquo;}&lsquo;则判断它是否与栈顶元素匹配，如果匹配，则继续遍历字符串，否则返回false，说明它不匹配；当字符串遍历完了，判断栈是否为空，如果为空则括号匹配，如果不为空则括号不匹配。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;
class Solution {
public:
    bool isValid(string s) {
        if (s.length()&lt;=0) {
            return true;
        }
        int n = (int)s.length();
        if (n%2!=0) {
            return false;
        }else{
            stack&lt;char&gt; stack;
            for (int i=0; i&lt;n; i++) {
                if (s[i]=='('||s[i]=='['||s[i]=='{') {
                    stack.push(s[i]);
                }
                if (!stack.empty()) {
                    if (s[i]==')') {
                        char top = stack.top();
                        if (top=='(') {
                            stack.pop();
                            continue;
                        }else{
                            return false;
                        }
                    }
                    else if (s[i]==']') {
                        char top = stack.top();
                        if (top=='[') {
                            stack.pop();
                            continue;
                        }else{
                            return false;
                        }
                    }
                    else if (s[i]=='}') {
                        char top = stack.top();
                        if (top=='{') {
                            stack.pop();
                            continue;
                        }else{
                            return false;
                        }
                    }
                }
            }
            if (stack.empty()) {
                return true;
            }else{
                return false;
            }
            ;
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[栈的压入与弹出序列]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/07/ios35/"/>
    <updated>2016-02-07T11:28:41+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/07/ios35</id>
    <content type="html"><![CDATA[<h2>要求：</h2>

<p>给定压栈序列，如何判断弹栈序列是否合法，例如：  <br/>
压栈序列：1，2，3，4，5  <br/>
弹栈序列：4，5，3，2，1  就是合法  <br/>
弹栈序列：4，5，3，1，2  就是不合法</p>

<h2>做法：</h2>

<p><code>1.</code> 初始化一个栈s和指针k，k用于遍历压栈序列，遍历弹栈序列，如果s非空且弹栈序列元素与s栈顶元素相同，就弹栈；    <br/>
<code>2.</code> 如果上述条件不成立，遍历压栈序列，如果压栈序列元素与弹栈序列元素相同时，则k++，跳出当前循环；否则将压栈元素压入栈中，k++,继续遍历；当k大于等于数组长度时，则返回false；  <br/>
<code>3.</code> 如果压栈序列遍历完成，则返回true；</p>

<h2>代码如下：</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;
class Solution{
public:
    bool TestValidPushAndPop(int pushSequence[],int popSequence[],int n){
        int k = 0;
        stack&lt;int&gt; s;
        for (int i=0; i&lt;n; i++) {
            if (!s.empty()&amp;&amp;popSequence[i]==s.top()) {
                s.pop();
            }else{
                while (true) {
                    if (k &gt;= n) {
                        return false;
                    }else{
                        if (pushSequence[k]==popSequence[i]) {
                            k++;
                            break;
                        }else{
                            s.push(pushSequence[k]);
                            k++;
                        }
                    }
                }

            }
        }
        return true;
    }


};
int main(int argc, const char * argv[]) {
    Solution* s = new Solution();
    int push[] = {1,2,3,4,5};
    int pop[] = {4,5,3,2,1};
    cout&lt;&lt;s-&gt;TestValidPushAndPop(push, pop, 5)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现一个带有min()函数的栈，在 O(1) 时间内取得最小元素]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/07/ios34/"/>
    <updated>2016-02-07T11:12:56+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/07/ios34</id>
    <content type="html"><![CDATA[<h2>要求：</h2>

<p>实现一个带有min()函数的栈，在 O(1) 时间内取得最小元素</p>

<h2>做法：</h2>

<p><code>1.</code> 定义两个栈，其中一个栈MinStack用于存储各个阶段的最小值；  <br/>
<code>2.</code> 当元素入栈时，对于普通栈只是正常压入，对于MinStack则先取得MinStack的栈顶元素与压栈元素比较，压入他们之中的较小者；  <br/>
<code>3.</code> 弹栈时，两个栈都弹栈；</p>

<h2>代码如下：</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;
class MinStack {
    stack&lt;int&gt; s;
    stack&lt;int&gt; minStack;
public:
    void push(int x) {
        if (s.empty()) {
            s.push(x);
            minStack.push(x);
        }else{
            s.push(x);
            int k = minStack.top();
            if (k&lt;=x) {
                minStack.push(k);
            }else{
                minStack.push(x);
            }
        }
    }

    void pop() {
        s.pop();
        minStack.pop();
    }

    int top() {
        return s.top();
    }

    int getMin() {
        return minStack.top();
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
