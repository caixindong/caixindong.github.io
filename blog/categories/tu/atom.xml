<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 图 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/tu/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-07-17T14:59:17+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[图多源最短路径问题(Floyd算法)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/29/ios67/"/>
    <updated>2016-02-29T21:54:48+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/29/ios67</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>求图多源最短路径问题有一种简洁优雅的算法&ndash;Floyd算法。</p>

<h2>做法</h2>

<p><code>1.</code> 定义一个二维数组dist，dist[i][j]代表i到j的最短路径，如果i和j不可达，就初始化为无穷大，为了方便计算，我这里设为9999。  <br/>
<code>2.</code> 定义一个二维数组next，next[i][j]代表i到j这条路径中i的下一个站点，如果i和j不可达，就初始化为-1。  <br/>
<code>3.</code> 我们假设所有点经过k一定会到达另一个点，i到j如果可达，那么它有两条路径i->j和i->k—>j，我们通过比较这两条路径的大小来决定dist[i][j]的值，我们可以转化为一个动态方程来理解下：  <br/>
dist[i][j] = Min{dist[i][j],dist[i][k]+dist[k][j]}  <br/>
<code>4.</code> 同时我们还要记录next[i][j]的值，如果经过k的路径比较短，那么next[i][j] = next[i][k]</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

/**
 * 利用了动态规划
 * 时间复杂度为O(n^3)
 **/
void floyd(vector&lt;vector&lt;int&gt;&gt; &amp;dist,vector&lt;vector&lt;int&gt;&gt; &amp;next){
    size_t size = dist.size();
    for (int k = 0; k&lt;size; k++) {
        for (int i = 0; i &lt;size; i++) {
            for (int j = 0; j&lt;size; j++) {
                if (dist[i][k]+dist[k][j]&lt;dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
    }
}


void printPath(int i,int j,vector&lt;vector&lt;int&gt;&gt; &amp;next){
    if (next[i][j]==-1) {
        cout&lt;&lt;i&lt;&lt;" to "&lt;&lt;j&lt;&lt;" no path"&lt;&lt;endl;
        return;
    }
    cout&lt;&lt;i;
    while (i!=j) {
        i = next[i][j];
        cout&lt;&lt;"-&gt;"&lt;&lt;i;
    }
    cout&lt;&lt;endl;
}

int main(int argc, const char * argv[]) {
    vector&lt;vector&lt;int&gt;&gt; dist =
    {
        {0,9999,-2,9999},
        {4,0,3,9999},
        {9999,9999,0,2},
        {9999,-1,9999,0}

    };

    vector&lt;vector&lt;int&gt;&gt; next =
    {
        {-1,-1,2,-1},
        {0,-1,2,-1},
        {-1,-1,-1,3},
        {-1,1,-1,-1}
    };

    floyd(dist, next);

    for (int i = 0; i&lt;dist.size(); i++) {
        for (int j = 0; j&lt;dist.size(); j++) {
            cout&lt;&lt;dist[i][j]&lt;&lt;" ";
        }
        cout&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    for (int i = 0; i&lt;dist.size(); i++) {
        for (int j = 0; j&lt;dist.size(); j++) {
            printPath(i, j, next);
        }
        cout&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图单源最短路径问题(Dijkstra算法)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/19/ios55/"/>
    <updated>2016-02-19T15:36:10+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/19/ios55</id>
    <content type="html"><![CDATA[<h2>算法思路</h2>

<p><code>1.</code> 图用邻接表表达（ <a href="http://caixindong.github.io/blog/2016/02/19/ios53/">http://caixindong.github.io/blog/2016/02/19/ios53/</a> ），每个图结点都储存一个值，记录源结点到结点的距离，一开始初始化为不可达，即距离设置为无穷大，而源结点的值为0，因为源结点到源结点的距离为0；  <br/>
<code>2.</code> 从源结点开始，遍历从源结点出发的所有路径，某结点可达，它的值更新为源结点的值加上之间路径的值，不可达的结点保持原来的值；      <br/>
<code>3.</code> 从那些未遍历的结点中取值最小的结点作为下一个遍历的结点；      <br/>
<code>4.</code> 遍历从当前遍历结点出发的所有路径，某结点可达，比较当前遍历结点的值加上路径值的和与某结点的值的大小，哪个小就更新为哪个值；
<code>5.</code> 继续从那些未遍历的结点中取值最小的结点作为下一个遍历的结点，继续步骤4的做法，直到所有结点都被遍历。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include "graph.hpp"
#include &lt;climits&gt;
#include &lt;queue&gt;
using namespace std;
/**
 * 用于记录图结点数据
 * id   结点id
 * dist 源结点到当前结点的最短距离
 * prev 最短路径的前一个结点
 * processed 是否遍历过
 **/
struct node {
    int id;
    int dist;
    int prev;
    bool processed;
    node():dist(INT_MAX),prev(-1),processed(false){

    }
};

/**
* 用于比较距离大小的仿函数
**/
struct compare_node {
    bool operator()(node&amp; a,node &amp;b){
        return a.dist &gt; b.dist;
    }
};

/**
 * Dijkstra算法
 * g 操作的图
 * source 源结点
 **/
vector&lt;node&gt; Dijkstra(Graph &amp;g,int source){
      //获取图结点个数
    int node_count = (int)g.ad_vector.size();

    //将遍历每个结点的结果存放在nodes容器
    vector&lt;node&gt; nodes(node_count);

    for (int i=0; i&lt; node_count; i++) {
        nodes[i].id = i;
    }

    nodes[source].dist = 0;

    //优先队列，dist小的先出队
    priority_queue&lt;node,vector&lt;node&gt;,compare_node&gt; node_pq;
    node_pq.push(nodes[source]);

    while (!node_pq.empty()) {
        node current_node = node_pq.top();
        node_pq.pop();
        if (current_node.processed) {
            continue;
        }else{
            list&lt;edge_node&gt; edge_nodes = g.ad_vector[current_node.id];
            for (auto pos = edge_nodes.begin(); pos!=edge_nodes.end(); pos++) {
                node&amp; dest_node = nodes[pos-&gt;dest_id];
                if (current_node.dist+pos-&gt;weight&lt;dest_node.dist) {
                    dest_node.dist = current_node.dist+pos-&gt;weight;
                    dest_node.prev = current_node.id;
                    node_pq.push(dest_node);
                }
            }
            current_node.processed = true;
        }
    }
    return nodes;
}

void print_path(vector&lt;node&gt;&amp; nodes,int node_id){
    if (nodes[node_id].prev==-1) {
        cout&lt;&lt;"path: "&lt;&lt;node_id;
    }else{
        print_path(nodes,nodes[node_id].prev);
        cout&lt;&lt; "-&gt;" &lt;&lt; node_id;
    }
}

int main(int argc, const char * argv[]) {
    Graph g(7);
    g.add_edge(0, 1, 2);
    g.add_edge(0, 3, 9);
    g.add_edge(0, 4, 6);
    g.add_edge(1, 2, 1);
    g.add_edge(1, 4, 3);
    g.add_edge(2, 4, 1);
    g.add_edge(2, 6, 6);
    g.add_edge(4, 3, 2);
    g.add_edge(4, 5, 9);
    g.add_edge(5, 6, 5);

    vector&lt;node&gt; result = Dijkstra(g, 0);
    for(int i = 0; i &lt; result.size(); i++){
        cout &lt;&lt; "Print path and dist for node:" &lt;&lt; result[i].id &lt;&lt; endl;
        print_path(result, result[i].id);
        cout &lt;&lt; endl &lt;&lt; "Dist:" &lt;&lt; result[i].dist &lt;&lt; endl;
    }
        return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图的遍历]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/19/ios54/"/>
    <updated>2016-02-19T15:26:01+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/19/ios54</id>
    <content type="html"><![CDATA[<h2>代码如下：</h2>

<pre><code class="C++">#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;

/**
 * 路径的权值为1，就是两个结点相连，为0，则为两个结点不相连
 **/
class Graphic {
private:
    std::vector&lt;std::vector&lt;int&gt;&gt; g;

public:
    Graphic(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;g):g(g){

    }

    /**
     *深度优先遍历（递归）
     **/
    void DFS_Recursive(int node_id){
        //储存结点是否被访问
        std::vector&lt;bool&gt; Visited(g.size());
        visit(Visited,node_id);
    }

    /**
     *深度优先遍历（非递归）
     **/
    void DFS(int node_id){
        std::vector&lt;bool&gt; visited(g.size());
        std::stack&lt;int&gt; stack;
        stack.push(node_id);
        while (stack.size()&gt;0) {
            int visitedNode = stack.top();
            stack.pop();
            //判断是否访问过
            if (!visited[visitedNode]) {
                std::cout&lt;&lt;"dfs visit is "&lt;&lt;visitedNode&lt;&lt;std::endl;
                visited[visitedNode] = true;
                for (int i=0; i&lt;g.size(); i++) {
                    if (visited[i]==false&amp;&amp;g[visitedNode][i]==1) {
                        stack.push(i);
                    }
                }

            }
        }
    }

    /**
     *广度优先遍历（非递归）
     **/

    void BFS(int node_id){
        std::vector&lt;bool&gt; visited(g.size());
        std::queue&lt;int&gt; queue;
        queue.push(node_id);

        while (queue.size()&gt;0) {
            int visitedNode = queue.front();
            queue.pop();
            if (!visited[visitedNode]) {
                std::cout&lt;&lt;"bfs visit is "&lt;&lt;visitedNode&lt;&lt;std::endl;
                visited[visitedNode] = true;
                for (int i=0; i&lt;g.size(); i++) {
                    if (visited[i]==false&amp;&amp;g[visitedNode][i]==1) {
                        queue.push(i);
                    }
                }
            }
        }
    }
private:
    void visit(std::vector&lt;bool&gt; &amp;visited,int node_id){
        visited[node_id] = true;
        std::cout&lt;&lt;"dfs_recursive visit is "&lt;&lt;node_id&lt;&lt;std::endl;
        for (int i=0; i&lt;visited.size(); i++) {
            if (g[node_id][i]==1&amp;&amp;!visited[i]) {
                visit(visited, i);
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图的表达]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/19/ios53/"/>
    <updated>2016-02-19T14:45:57+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/19/ios53</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>图的表达有两种方式实现，一种是利用邻接矩阵，一种是利用邻接表。  <br/>
<code>1.</code> 利用邻接矩阵：利用一个二维数组来储存图结点的数据，数组的下标对应结点的编号，值代表结点之间的权值；  <br/>
<code>2.</code> 利用邻接表：实际上是利用一维数组和链表来实现的，链表用来存储某个结点到其他结点的路径，链表的第一个元素为到本结点的路径，数组用来储存各个链表；</p>

<h2>比较</h2>

<p>我们将图的结点个数设为V，图的路径个数设为E。  <br/>
用第一种方式实现，它的空间复杂度为O(V<sup>2</sup>)；  <br/>
用第二种方式实现，它的空间复杂度为O(V*E)。  <br/>
所以当图里面的路径比较稀疏用第二种方式实现，如果比较密集，则两种都可以。</p>

<h2>代码实现</h2>

<h4>利用邻接矩阵实现</h4>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;vector&gt;
using namespace std;

class Graphic {
private:
    std::vector&lt;std::vector&lt;int&gt;&gt; g;

public:
    Graphic(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;g):g(g){

    }
};

int main(int argc, const char * argv[]) {
    vector&lt;vector&lt;int&gt;&gt; g ={
        {0,0,1,1},
        {0,0,1,1},
        {0,1,0,0},
        {0,1,1,0}
    };

    Graphic gr(g);
    return 0;
}
</code></pre>

<h4>利用邻接表实现</h4>

<pre><code class="C++">#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;list&gt;
#include &lt;iostream&gt;

/**
 * 图路径
 * dest_id 目的结点的ID
 * weight 路径权值
 **/
struct edge_node {
    int dest_id;
    int weight;

    edge_node(int id,int weight)
    :dest_id(id),weight(weight){

    }

};

class Graph {

    std::vector&lt;std::list&lt;edge_node&gt;&gt; ad_vector;

public:
    Graph(int n)
    :ad_vector(n){

    }

    /**
     * 添加图路径
     **/
    void add_edge(int source,int dist,int weight){
        edge_node new_eage(dist,weight);
        ad_vector[source].push_back(new_eage);
    }

    /**
    * 打印所有路径
    **/
    void dump(){
        for (int i=0; i&lt;ad_vector.size(); i++) {
            for (auto pos = ad_vector[i].begin(); pos!=ad_vector[i].end(); pos++) {
                std::cout&lt;&lt;"edge from "&lt;&lt;i&lt;&lt;" to "&lt;&lt;pos-&gt;dest_id;
                std::cout&lt;&lt;" weight: "&lt;&lt;pos-&gt;weight&lt;&lt;std::endl;
            }
        }
    }
};

int main(int argc, const char * argv[]) {
    Graph g(4);
    g.add_edge(0, 1, 1);
    g.add_edge(0, 3, 1);
    g.add_edge(1, 2, 1);
    g.add_edge(1, 3, 1);
    g.add_edge(3, 2, 1);
    g.dump();
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
