<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 链表 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/lian-biao/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-05-11T23:32:22+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[重新整理链表]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/07/ios79/"/>
    <updated>2016-03-07T16:59:25+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/07/ios79</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>例如原链表为 1->2->3->4->5 ,重新整理后为 1->4->2->5->3</p>

<h2>代码实现</h2>

<pre><code class="C++">
/**
* 跟着算法走一遍就知道如何重新整理
**/
#include &lt;iostream&gt;
using namespace::std;

struct ListNode {
      int val;
      ListNode *next;
      ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    //1,2,4,5 -&gt; 1,4,2,5  1,2,3,4,5 -&gt; 1,4,2,5,3
    int lengthOfList(ListNode* head){
        ListNode* p = head;
        int count = 0;
        while (p!=NULL) {
            p = p-&gt;next;
            count++;
        }
        return count;
    }

    /**
    * 翻转链表
    **/
    ListNode* reverseList(ListNode* head){
        ListNode* pre = head;
        ListNode* p = pre-&gt;next;
        ListNode* next = NULL;
        while (p!=NULL) {
            next = p-&gt;next;
            p-&gt;next = pre;
            pre = p;
            p = next;
        }
        head-&gt;next=NULL;
        return pre;
    }

    void reorderList(ListNode* head) {
        if (head==NULL||head-&gt;next==NULL) {
            return;
        }else{
            int n = lengthOfList(head);
            int half = n/2;
            if (n%2!=0) {
                half++;
            }
            ListNode* leftEnd = head;
            for (int i=0; i&lt;half-1; i++) {
                leftEnd = leftEnd-&gt;next;
            }

            ListNode* rightStart = leftEnd-&gt;next;
            rightStart = reverseList(rightStart);

            leftEnd-&gt;next =NULL;
            ListNode* left = head;
            ListNode* right = rightStart;
            ListNode* next = NULL;

            //重新链接
            bool flag = true;
            while (right!=NULL) {
                if (flag) {
                    next = left-&gt;next;
                    left-&gt;next = right;
                    left = next;
                }else{
                    next = right-&gt;next;
                    right-&gt;next = left;
                    right = next;
                }
                flag = !flag;
            }
        }

    }
};
int main(int argc, const char * argv[]) {
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断是否是回文链表]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/07/ios78/"/>
    <updated>2016-03-07T16:40:05+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/07/ios78</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>判断一个链表是否是回文链表，例如：1->2->3->3->2->1->NULL 这是回文链表</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
//1,2,3,4,3,2,1  1,2,3,3,2,1
class Solution {
public:
    int lengthOfList(ListNode* head){
        ListNode* p = head;
        int count = 0;
        while (p!=NULL) {
            p = p-&gt;next;
            count++;
        }
        return count;
    }
    ListNode* reveseList(ListNode* head){
        ListNode* pre = head;
        ListNode* p = head-&gt;next;
        ListNode* next  = NULL;
        while (p!=NULL) {
            next = p-&gt;next;
            p-&gt;next = pre;
            pre = p;
            p = next;
        }
        head-&gt;next = NULL;
        return pre;
    }
    bool isPalindrome(ListNode* head) {
        if (head==NULL||head-&gt;next==NULL) {
            return true;
        }else{
            int len = lengthOfList(head);
            int half = len/2;
            ListNode* leftStart = head;
            ListNode* rightStart = head;
            if (len%2!=0) {
                half++;
            }
            for (int i=0; i&lt;half; i++) {
                rightStart = rightStart-&gt;next;
            }
            rightStart = reveseList(rightStart);
            while (rightStart!=NULL) {
                if (leftStart-&gt;val==rightStart-&gt;val) {
                    leftStart = leftStart-&gt;next;
                    rightStart = rightStart-&gt;next;
                }else{
                    return false;
                }
            }
            return true;
        }

    }
};
int main(int argc, const char * argv[]) {

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除链表的重复元素(二)]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/05/ios76/"/>
    <updated>2016-03-05T21:27:35+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/05/ios76</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>删除链表中的重复元素,例如1->1->1->2->3->3->4->4->5，返回2->5</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;

struct ListNode {
         int val;
         ListNode *next;
         ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head==NULL||head-&gt;next==NULL) {
            return head;
        }else{
            ListNode* newHead = new ListNode(0);
            newHead-&gt;next = head;
            ListNode* pre = newHead;
            ListNode* p = pre-&gt;next;
            ListNode* next = NULL;
            while (p!=NULL&amp;&amp;p-&gt;next!=NULL) {
                next = p-&gt;next;
                if (p-&gt;val==next-&gt;val) {
                    while (next!=NULL&amp;&amp;next-&gt;val==p-&gt;val) {
                        next = next-&gt;next;
                    }
                    pre-&gt;next = next;
                    p = next;
                }else{
                    pre = pre-&gt;next;
                    p =  p-&gt;next;
                }
            }
            return newHead-&gt;next;

        }
    }
};
int main(int argc, const char * argv[]) {
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除链表的重复元素(一)]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/05/ios75/"/>
    <updated>2016-03-05T21:09:32+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/05/ios75</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>删除链表里的重复元素，例如1->2->2->3->3->4->5->5->6，返回1->2->3->4->5->6</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace::std;
//1,2,3,3,4,5 -&gt; 1,2,3,4,5
  struct ListNode {
      int val;
      ListNode *next;
      ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head==NULL||head-&gt;next==NULL) {
            return head;
        }else{
            ListNode* pre = head;
            ListNode* p = pre-&gt;next;
            while (p!=NULL) {
                if (pre-&gt;val==p-&gt;val) {
                    pre-&gt;next = p-&gt;next;
                    p = p-&gt;next;
                }else{
                    pre = pre-&gt;next;
                    p = p-&gt;next;
                }
            }
            return head;
        }
    }
};
int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout &lt;&lt; "Hello, World!\n";
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除链表中倒数第n个元素]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/05/ios74/"/>
    <updated>2016-03-05T20:48:54+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/05/ios74</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>删除链表中倒数第n个元素，例如1->2->3->4->5->6,n=2,返回1->2->3->4->6</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct ListNode {
         int val;
         ListNode *next;
         ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head==NULL) {
            return head;
        }else{
            ListNode* newHead = new ListNode(0);
            newHead-&gt;next = head;
            ListNode* pre = newHead;
            ListNode* p = newHead;
            for (int i=0; i&lt;n; i++) {
                p = p-&gt;next;
            }
            while (p-&gt;next!=NULL) {
                pre = pre-&gt;next;
                p = p-&gt;next;
            }
            pre-&gt;next = pre-&gt;next-&gt;next;
            return newHead-&gt;next;
        }
    }
};
int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout &lt;&lt; "Hello, World!\n";
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
