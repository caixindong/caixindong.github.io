<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-03-27T00:33:34+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++中的map和unordered_map]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/23/ios58/"/>
    <updated>2016-02-23T16:08:04+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/23/ios58</id>
    <content type="html"><![CDATA[<h1>map</h1>

<h2>简介</h2>

<p>映射表（Map）容器是一个按特定顺序存储以键值对组合而成的元素的关联容器。</p>

<h2>类模板</h2>

<pre><code class="C++">// &lt;map&gt;
template &lt; class Key,
    class T,
    class Compare = less&lt;Key&gt;,
    class Alloc = allocator&lt;pair&lt;const Key,T&gt; &gt;
&gt; class map
</code></pre>

<h3>模板参数</h3>

<p><code>1.</code> key：主键的类型；  <br/>
<code>2.</code> T：被映射的值得类型；  <br/>
<code>3.</code> Compare：一个二元谓词，以两个元素的主键为参数返回一个 bool 值。  <br/>
<code>4.</code> Alloc：容器内部用来管理内存分配及释放的内存分配器的类型。这个参数是可选的，它的默认值是 std::allocator<T>，这个是一个最简单的非值依赖的（Value-independent）内存分配器。</p>

<h2>详细说明</h2>

<p>在一个映射表容器中，主键通常被用来排序及唯一标志一个元素，而被映射的值保存了与该主键关联的内容。主键与被映射值的类型可以不同，在模板内部，这两种类型合并绑定成成员类型 value_type。由上述描述可知，value_type 是一个双元组类型（Pair type），具体定义如下：</p>

<pre><code class="C++">typedef pair&lt;const Key, T&gt; value_type;
</code></pre>

<p>map 容器中的所有元素都是按由类型为 Compare 的比较对象指定的严格弱序规则排序的。  <br/>
在用主键访问单个元素时，map 容器通常比 unordered_map 容器低效，但 map 容器允许按顺序直接对某个子集进行迭代。  <br/>
map 容器通常被实现为一个二叉搜索树（及其变型），该数据结构具有对数据自动排序的功能。  <br/>
在所有关联容器中，map 容器唯一具有的一个特点：实现了直接访问操作符（operator[]），使得可以直接访问被映射的值。  <br/>
map 容器支持双向迭代。</p>

<h2>相关函数使用说明</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;string&gt;
using namespace std;
struct Node {
    int id;
    int val;
    Node(int id,int val)
    :id(id),val(val){

    }
};

struct compare{
    bool operator()(const Node &amp;a,const Node &amp;b)const{
        return a.val&lt;b.val;
    }
};

bool operator&lt;(const Node &amp;a,const Node &amp;b){
    return a.val&lt;b.val;
}

int main(int argc, const char * argv[]) {
    cout&lt;&lt;"初始化一个map，有序的，默认是升序"&lt;&lt;endl;
    map&lt;string,int&gt; test_map;



    cout&lt;&lt;"添加数据方式一,插入key值一样的pair，不会改变原本pair"&lt;&lt;endl;
    test_map.insert(pair&lt;string, int&gt;("a",2));
    test_map.insert(pair&lt;string, int&gt;("b",3));
    test_map.insert(pair&lt;string, int&gt;("d",4));
    test_map.insert(pair&lt;string, int&gt;("c",6));


    cout&lt;&lt;"添加数据方式二,可以通过[]来修改key对应的值"&lt;&lt;endl;
    test_map["a"] = 2;
    test_map["b"] = 3;
    test_map["d"] = 4;
    test_map["c"] = 6;

    cout&lt;&lt;"传入key值删除元素"&lt;&lt;endl;
    test_map.erase("a");

    cout&lt;&lt;"map的大小"&lt;&lt;endl;
    cout&lt;&lt;test_map.size()&lt;&lt;endl;

    cout&lt;&lt;"遍历map"&lt;&lt;endl;
    for (auto pos = test_map.begin(); pos!=test_map.end(); pos++) {
        cout&lt;&lt;"key:"&lt;&lt;pos-&gt;first&lt;&lt;" value:"&lt;&lt;pos-&gt;second&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    cout&lt;&lt;"计算key为d的元素个数，为1即有，为0即没有"&lt;&lt;endl;
    if(test_map.count("d")==1){
        cout&lt;&lt;"find d"&lt;&lt;endl;
    }else{
        cout&lt;&lt;"no find"&lt;&lt;endl;
    }

    cout&lt;&lt;"寻找key为d的元素，若找到的返回对象元素的迭代器，否则返回最后一个元素的迭代器"&lt;&lt;endl;
    if (test_map.find("d")!=test_map.end()) {
        cout&lt;&lt;"find d value is "&lt;&lt;test_map.find("d")-&gt;second&lt;&lt;endl;
    }else{
        cout&lt;&lt;"no find"&lt;&lt;endl;
    }

    cout&lt;&lt;"自定义类型的map,需要重新compare函数或者重载&lt;运算符，其他用法参照上面"&lt;&lt;endl;
    map&lt;Node, int, compare&gt; node_map;

    //需要重载&lt;运算符，系统默认的compare是less
    //map&lt;Node, int&gt; node_map;
    Node n1(1,2);
    Node n2(3,1);
    Node n3(4,5);

    node_map.insert(pair&lt;Node, int&gt;(n1,1));
    node_map.insert(pair&lt;Node, int&gt;(n2,2));
    node_map.insert(pair&lt;Node, int&gt;(n3,3));

    for (auto pos = node_map.begin(); pos!=node_map.end(); pos++) {
        cout&lt;&lt;"Node value is "&lt;&lt;pos-&gt;second&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>

<h1>unordered_map</h1>

<h2>简介</h2>

<p>无序映射表（Unordered Map）容器是一个存储以键值对组合而成的元素的关联容器，容器中的元素无特别的次序关系。该容器允许基于主键地快速检索各个元素</p>

<h2>类模板</h2>

<pre><code class="C++">// &lt;unordered_map&gt;
template &lt; class Key,
    class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = equal_to&lt;Key&gt;,
    class Alloc = allocator&lt; pair&lt;const Key,T&gt; &gt;
&gt; class unordered_map;
</code></pre>

<h3>模板参数</h3>

<p><code>1.</code> key：主键类型；  <br/>
<code>2.</code>  T：被映射的值的类型；  <br/>
<code>3.</code> Hash：一元谓词，以一个 Key 类型的对象为参数，返回一个基于该对象的 size_t 类型的唯一值；  <br/>
<code>4.</code> Pred：二元谓词，以两个 Key 类型的对象为参数，返回一个 bool 值，如果第一个参数等价于第二个参数，该 bool 值为 true，否则为 false。默认为 std::equal_to；  <br/>
<code>5.</code> Alloc：容器内部用来管理内存分配及释放的内存分配器的类型。这个参数是可选的，它的默认值是 std::allocator<T>，这个是一个最简单的非值依赖的（Value-independent）内存分配器。</p>

<h2>详细说明</h2>

<p>在一个 unordered_map 容器中，主键通常被用来唯一标志（Uniquely identify）一个元素，而被映射的值保存了与该主键关联的内容。主键与被映射值的类型可以不同，在模板内部，这两种类型合并绑定成成员类型 value_type。由上述描述可知，value_type 是一个双元组类型（Pair type），具体定义如下：</p>

<pre><code class="C++">typedef pair&lt;const Key, T&gt; value_type;
</code></pre>

<p>在 unordered_map 内部，元素不会按任何顺序排序，而是通过主键的 hash 值将元素分组放置到各个槽（Bucket，也可译成“桶”）中，这样就能通过主键快速地访问各个对应的元素（平均耗时为一个常量，即时间复杂度为 O(1)）。  <br/>
在访问容器中的某个元素时，unordered_map 容器比 map 容器高效，而在迭代容器元素的某个子集时，前者比后者稍微低效了一点。  <br/>
unordered_map 实现了直接访问操作符（operator[]），使得可以通过主键（Key value）直接访问被映射的值（Mapped value）。  <br/>
unordered_map 容器支持正向迭代。</p>

<h2>相关函数说明</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;string&gt;
using namespace std;
struct Node {
    int id;
    int val;
    Node(int id,int val)
    :id(id),val(val){

    }
};

struct hash_func{
    size_t operator()(const Node &amp;n)const{
        return n.id*99+n.val;
    }
};

struct equal_to_func{
    bool operator()(const Node &amp;a,const Node &amp;b)const{
        return a.id==b.id&amp;&amp;a.val==b.val?true:false;
    }
};

int main(int argc, const char * argv[]) {
    Node n1(1,2);
    Node n2(3,1);
    Node n3(4,5);


    cout&lt;&lt;"初始化一个unordered_map"&lt;&lt;endl;
    unordered_map&lt;string, int&gt; test_unordered_map;
    test_unordered_map["a"] = 1;
    test_unordered_map["b"] = 2;
    test_unordered_map["c"] = 3;
    cout&lt;&lt;"遍历unordered_map"&lt;&lt;endl;
    for (auto pos = test_unordered_map.begin(); pos!=test_unordered_map.end(); pos++) {
        cout&lt;&lt;"key:"&lt;&lt;pos-&gt;first&lt;&lt;" value:"&lt;&lt;pos-&gt;second&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    cout&lt;&lt;"初始化一个自定义类型unordered_map，需要重写hash函数和pred函数"&lt;&lt;endl;
    unordered_map&lt;Node, int,hash_func,equal_to_func&gt; node_unordered_map;
    node_unordered_map[n1] = 1;
    node_unordered_map[n2] = 2;
    node_unordered_map[n3] = 3;
    cout&lt;&lt;"遍历node_unordered_map"&lt;&lt;endl;
    for (auto pos = node_unordered_map.begin(); pos!=node_unordered_map.end(); pos++) {
        cout&lt;&lt;"key id:"&lt;&lt;pos-&gt;first.id&lt;&lt;" value:"&lt;&lt;pos-&gt;second&lt;&lt;endl;
    }
    cout&lt;&lt;endl;


    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中的set和unordered_set]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/22/ios56/"/>
    <updated>2016-02-22T20:28:12+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/22/ios56</id>
    <content type="html"><![CDATA[<h1>set</h1>

<h2>简介</h2>

<p>集合（Set）容器是一个按特定顺序存储唯一元素的关联容器。</p>

<h2>类模板</h2>

<pre><code class="C++">template &lt; class T,
           class Compare = less&lt;T&gt;,
           class Alloc = allocator&lt;T&gt; &gt;
&gt; class set;
</code></pre>

<h3>模板参数</h3>

<p><code>1.</code> T：元素的类型。  <br/>
<code>2.</code> Compare：一个二元谓词，以两个元素为参数返回一个 bool 值。(比较函数)  <br/>
<code>3.</code> Alloc：容器内部用来管理内存分配及释放的内存分配器的类型。这个参数是可选的，它的默认值是 std::allocator<T>.</p>

<h2>详细说明</h2>

<p>在一个集合中，元素的值同时可以用来标志对应的元素（即值是自身的主键），每个值必须是唯一的。主键是不可修改的，因此在 set 中的元素不能被逐个修改（所有元素保持恒定），但是可以删除某个元素或插入新的元素。  <br/>
set 容器中的所有元素都是按由类型为 Compare 的比较对象指定的严格弱序规则排序的。  <br/>
在用主键访问单个元素时，set 容器通常比 unordered_set 容器低效，但 set 容器允许按顺序直接对某个子集进行迭代。  <br/>
set 容器通常被实现为一个二叉搜索树（及其变型），该数据结构具有对数据自动排序的功能。
支持双向迭代</p>

<h2>相关函数使用说明</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;unordered_set&gt;
using namespace std;
struct Node {
    int val;
    int id;
    Node(int id,int val)
    :val(val),id(id){

    }
};



bool operator&lt;(const Node&amp; a,const Node &amp;b)
{
    return a.val&lt;b.val;
}


int main(int argc, const char * argv[]) {
    cout&lt;&lt;"初始化一个set"&lt;&lt;endl;
    set&lt;int&gt; test_set = {2,3,19,8,6,7};

    cout&lt;&lt;"删除一个元素"&lt;&lt;endl;
    test_set.erase(19);

    cout&lt;&lt;"遍历set里面的元素"&lt;&lt;endl;
    for (auto pos = test_set.begin(); pos!=test_set.end(); pos++) {
        cout&lt;&lt;*pos&lt;&lt;" ";
    }
    cout&lt;&lt;endl;

    cout&lt;&lt;"查找元素的个数，如果为1就是找到，为0就是找不到"&lt;&lt;endl;
    if (test_set.count(5)==1) {
        cout&lt;&lt;"have find"&lt;&lt;endl;
    }else{
        cout&lt;&lt;"no find"&lt;&lt;endl;
    }

    cout&lt;&lt;"查找元素的迭代器，找不到则返回最后一个元素的迭代器，找得到就返回元素的迭代器"&lt;&lt;endl;
    if (test_set.find(5)!=test_set.end()) {
        cout&lt;&lt;"have find"&lt;&lt;endl;
    }else{
        cout&lt;&lt;"no find"&lt;&lt;endl;
    }

    cout&lt;&lt;"有效元素个数"&lt;&lt;endl;
    cout&lt;&lt;test_set.size()&lt;&lt;endl;

    cout&lt;&lt;"自定义类型的set，默认是less函数(&lt;),所以必须重载&lt;操作符,其他用法跟标准的set一样"&lt;&lt;endl;
    Node n1(1,5);
    Node n2(2,3);
    Node n3(3,9);
    set&lt;Node&gt; node_set;
    node_set.insert(n1);
    node_set.insert(n2);
    node_set.insert(n3);
    cout&lt;&lt;"遍历自定义类型set里面的元素"&lt;&lt;endl;
    for (auto pos = node_set.begin(); pos!=node_set.end(); pos++) {
        cout&lt;&lt;pos-&gt;id&lt;&lt;" ";
    }
    cout&lt;&lt;endl;
    return 0;
}
</code></pre>

<h1>unordered_set</h1>

<h2>简介</h2>

<p>无序集合（Unordered Set）容器是一个存储唯一元素的关联容器，容器中的元素无特别的次序关系。该容器允许基于值地快速元素检索。</p>

<h2>类模板</h2>

<pre><code class="C++">// &lt;unordered_set&gt;
template &lt; class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = equal_to&lt;Key&gt;,
    class Alloc = allocator&lt;Key&gt;
&gt; class unordered_set;
</code></pre>

<h3>模板参数</h3>

<p><code>1.</code> Key：元素的类型。  <br/>
<code>2.</code> Hash：一元谓词，以一个 Key 类型的对象为参数，返回一个基于该对象的 size_t 类型的唯一值（哈希函数）。  <br/>
<code>3.</code> Pred：二元谓词，以两个 Key 类型的对象为参数，返回一个 bool 值，如果第一个参数等价于第二个参数，该 bool 值为 true，否则为 false。默认为 std::equal_to。      <br/>
<code>4.</code> Alloc：容器内部用来管理内存分配及释放的内存分配器的类型。这个参数是可选的，它的默认值是 std::allocator<T>。</p>

<h2>详细说明</h2>

<p>在一个 unordered_set 容器中，元素的值同时可以用来标志对应的元素（即值是自身的主键），每个值必须是唯一的。主键是不可修改的，因此在 unordered_set 中的元素不能被逐个修改（所有元素保持恒定），但是可以删除某个元素或插入新的元素。  <br/>
在 unordered_set 内部，元素不会按任何顺序排序，而是通过元素值的 hash 值将元素分组放置到各个槽（Bucket，也可译成“桶”）中，这样就能通过元素值快速地访问各个对应的元素（平均耗时为一个常量，即时间复杂度为 O(1)）。  <br/>
在访问容器中的某个元素时，unordered_set 容器比 set 容器高效，而在迭代容器元素的某个子集时，前者比后者稍微低效了一点。  <br/>
unordered_set 容器支持正向迭代</p>

<h2>相关函数说明</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;unordered_set&gt;

using namespace std;
struct Node {
    int val;
    int id;
    Node(int id,int val)
    :val(val),id(id){

    }
};

struct node_hash_fun{
    size_t operator()(const Node &amp;n)const{
        return n.id*50+n.val;
    }
};

struct node_equal_fun{
    bool operator()(const Node &amp;n,const Node&amp;m)const{
        return n.id==m.id&amp;&amp;n.val==m.val?true:false;
    }
};


int main(int argc, const char * argv[]) {
    cout&lt;&lt;"相当于java的hashSet,里面存放的元素是无序的,其他用法跟set大同小异"&lt;&lt;endl;
    unordered_set&lt;int&gt; test_unordered_set = {2,5,3,6,7,1,9,0};

    cout&lt;&lt;"遍历unordered_set"&lt;&lt;endl;
    for (auto pos = test_unordered_set.begin(); pos!=test_unordered_set.end(); pos++) {
        cout&lt;&lt;*pos&lt;&lt;" ";
    }
    cout&lt;&lt;endl;

    Node n1(1,5);
    Node n2(2,3);
    Node n3(3,9);
    cout&lt;&lt;"自定义类型unordered_set，必须重载hash_func和==操作符,其他用法跟标准的unordered_set一样"&lt;&lt;endl;   unordered_set&lt;Node,node_hash_fun,node_equal_fun,allocator&lt;Node&gt;&gt; node_unordered_set;
    node_unordered_set.insert(n1);
    node_unordered_set.insert(n2);
    node_unordered_set.insert(n3);

    cout&lt;&lt;"遍历自定义类型unordered_set"&lt;&lt;endl;
    for (auto pos = node_unordered_set.begin(); pos!=node_unordered_set.end(); pos++) {
        cout&lt;&lt;(*pos).id&lt;&lt;" ";
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++优先队列(priority_queue)简析和使用]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/16/ios52/"/>
    <updated>2016-02-16T15:07:30+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/16/ios52</id>
    <content type="html"><![CDATA[<h2>基本操作</h2>

<p>跟队列的基本操作一样，也包含在queue这个头文件。  <br/>
<code>1.</code> empty() 如果队列为空返回真  <br/>
<code>2.</code> pop() 删除对顶元素  <br/>
<code>3.</code> push() 加入一个元素  <br/>
<code>4.</code> size() 返回优先队列中拥有的元素个数  <br/>
<code>5.</code> top() 返回优先队列对顶元素   <br/>
注意：默认优先队列先出队的元素为优先级最高的元素，在默认的int型中先出队的是最大的元素。标准库默认使用元素类型的 &lt; 操作符来确定它们之间的优先级关系</p>

<h2>实现方式</h2>

<p><code>1.</code> 基本数据类型的优先队列</p>

<h4>默认是从大到小</h4>

<pre><code class="C++">    int a[] = {4,7,3,8};
    priority_queue&lt;int&gt; intQ;
    for (int i=0; i&lt;4; i++) {
        intQ.push(a[i]);
    }
    while (!intQ.empty()) {
        cout&lt;&lt;intQ.top()&lt;&lt;" ";
        intQ.pop();
    }
    cout&lt;&lt;endl;
</code></pre>

<p>输出：8 7 4 3</p>

<h4>从小到大</h4>

<pre><code class="C++">    int a[] = {4,7,3,8};

    //priority_queue另一种实现方式
    //第一个参数是数据类型
    //第二个参数是容器类型，默认用vector
    //第三个参数是比较函数类型，默认是less&lt;&gt;,这里可以传入仿函数
    priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; intQ;
    for (int i=0; i&lt;4; i++) {
        intQ.push(a[i]);
    }
    while (!intQ.empty()) {
        cout&lt;&lt;intQ.top()&lt;&lt;" ";
        intQ.pop();
    }
    cout&lt;&lt;endl;
</code></pre>

<p>输出：3 4 7 8</p>

<p><code>2.</code> 自定义数据类型的优先队列</p>

<h4>在自定义的结构体内重载&lt;运算符</h4>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
using namespace std;
struct Node {
    int val;

    Node(int v)
    :val(v)
    {

    }
    //在结构体内重载&lt;运算符
    bool operator&lt;(const Node &amp;a)const{
        return val&gt;a.val;//val小的优先级高
    }
};
int main(int argc, const char * argv[]) {
  priority_queue&lt;Node&gt; q;
   Node n1(3);
    Node n2(4);
    Node n3(1);

    q.push(n1);
    q.push(n2);
    q.push(n3);

    while (!q.empty()) {
        cout&lt;&lt;q.top().val&lt;&lt;" ";
        q.pop();
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>

<p>输出： 1 3 4</p>

<h4>在结构体外重载&lt;操作符</h4>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
using namespace std;
struct Node {
    int val;

    Node(int v)
    :val(v)
    {

    }
};

//重载&lt;操作符
bool operator&lt;(Node a,Node b){
    return a.val &gt; b.val ;
}

int main(int argc, const char * argv[]) {
  priority_queue&lt;Node&gt; q;

    Node n1(3);
    Node n2(4);
    Node n3(1);

    q.push(n1);
    q.push(n2);
    q.push(n3);

    while (!q.empty()) {
        cout&lt;&lt;q.top().val&lt;&lt;" ";
        q.pop();
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>

<p>输出：1 3 4</p>

<h4>自定义比较函数</h4>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
using namespace std;
struct Node {
    int val;

    Node(int v)
    :val(v)
    {

    }
};

//仿函数
struct Compare {
     //重载()操作符
    bool operator()(Node a,Node b){
        return a.val &gt; b.val;//val小的优先级高
    }
};

int main(int argc, const char * argv[]) {
    priority_queue&lt;Node,vector&lt;Node&gt;,Compare&gt; q;
    Node n1(3);
    Node n2(4);
    Node n3(1);

    q.push(n1);
    q.push(n2);
    q.push(n3);

    while (!q.empty()) {
        cout&lt;&lt;q.top().val&lt;&lt;" ";
        q.pop();
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>

<p>输出：1 3 4</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析C++仿函数]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/16/ios51/"/>
    <updated>2016-02-16T13:28:30+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/16/ios51</id>
    <content type="html"><![CDATA[<h2>何为仿函数</h2>

<p>仿函数这个词经常出现在C++的模板库(STL)里，就自己浅陋的理解，仿函数就是能够实现跟函数一样的功能的东西，通常以结构体或类的形式呈现出来。实现的关键就是重载()这个操作符。</p>

<h2>为什么要用仿函数</h2>

<p>我们知道，函数可以作为参数来传递，我们知道可以用函数指针来实现。而仿函数是另一种方式来实现这样的功能。STL模板库中，大量使用这种技巧。</p>

<h2>代码举例说明</h2>

<pre><code class="C++">
/**
*我们实现对结构体Node对象的比较
**/
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;
using namespace std;

/**
*结构体Node
**/
struct Node {
    int val;
    Node(int v):val(v){

    }
};

/**
*基于二元操作符的仿函数实现
**/
struct Compare:binary_function&lt;Node*, Node*, bool&gt; {
    /**
    * 重载（）操作符
    **/
    bool operator()(Node &amp;a,Node &amp;b){
        return a.val&lt;b.val;
    }
};

int main(int argc, const char * argv[]) {
    Node n1(2);
    Node n2(3);
    cout&lt;&lt;Compare()(n2,n1)&lt;&lt;endl;
    return 0;
}
</code></pre>

<h2>在STL中使用举例</h2>

<pre><code class="C++">/**
* for_each函数实现的源码就用到了仿函数，Functor就是一个仿函数，它作为for_each的一个参数
**/

template &lt; typename Iterator, typename Functor &gt;   
void for_each( Iterator begin, Iterator end, Fucntor func )   
{   
for( ; begin!=end; begin++ )   
func( *begin );   
} 


/**
*使用for_each打印vector所有元素
**/

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;
using namespace std;

struct Print :unary_function&lt;int,void&gt;{
    void operator()(int i){
        cout&lt;&lt;i&lt;&lt;endl;
    }
};

int main(int argc, const char * argv[]) {
   vector&lt;int&gt; ve = {1,2,3};
   for_each(ve.begin(), ve.end(), Print());
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Split()函数的实现]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/08/ios39/"/>
    <updated>2016-02-08T19:32:26+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/08/ios39</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>java标准库提供split()函数用于字符型切割，但是C++的标准库并没有提供相应功能的方法，但是不用怕，今天我提供两种方法来实现我们自己的split()函数。</p>

<h2>方法一</h2>

<p>利用C++标准库提供s.find_first_of()函数和substr()函数的来解决。  <br/>
代码如下：</p>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
using namespace std;
/**
* s 指待分割的字符串
* delim 指分割符
* ret 用于存储分割结果的容器
**/

void split01(const string s,const string delim,vector&lt;string &gt;* ret)
{   
    //记录每次分割的起始位置
    size_t last = 0;
    //记录匹配delim这个字符的下标
    size_t index=s.find_first_of(delim,last);
    //当=-1时表示查找不到
    while (index!=-1)
    {       
        ret-&gt;push_back(s.substr(last,index-last));
        //记录下一次分割的起始位置
        last=index+1;
        index=s.find_first_of(delim,last);
    }
    //若最后一个分割符后面还有元素
    if (s.length()-last&gt;0) 
    {
        ret-&gt;push_back(s.substr(last));
    }
}
</code></pre>

<h2>方法二</h2>

<p>利用C++库提供的strtok()函数来解决。  <br/>
函数说明：char * strtok(char <em>s, const char </em>delim)，参数s 指向欲分割的字符串，参数delim 则为分割字符串，当strtok()在参数s 的字符串中发现到参数delim 的分割字符时则会将该字符改为\0 字符。还有一个用于多线程的strtok_r()。  <br/>
代码如下：</p>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
using namespace std;

void split02(const string mystr,const char* deli,vector&lt;string&gt;* list){
    const char* str = mystr.c_str();
    char buffer[mystr.length()];
    //从mystr拷贝（sizeof(buffer)+1）-1个字符到buffer中
    snprintf(buffer, sizeof(buffer)+1,str);
    char* gg;
    char* p = strtok_r(buffer, deli,&amp;gg);
    list-&gt;clear();
    while (p!=NULL) {
        list-&gt;push_back(p);
        //往后的调用则将参数s 设置成NULL。每次调用成功则返回下一个分割后的字符串指针，设为NULL则默认指向这个指针
        p = strtok_r(NULL, deli, &amp;gg);
    }
}
</code></pre>

<h2>附录:C++中string与char*和const char*互转的方法</h2>

<pre><code class="C++">    //string 转 const char*
    string s1 = "abc";
    const char* c1 = s1.c_str();

    //const char* 转 string
    string s2(c1);

    //string 转 char*
    char* c2;
    c2 = new char[s1.length()+1];
    strcpy(c2, s1.c_str());

    //char* 转 string
    char* c3 = "abc";
    string s3(c3);

    //const char* 转为 char*
    const char* c4 = "123";
    char* c5 = new char[100];
    strcpy(c5, c4);
</code></pre>
]]></content>
  </entry>
  
</feed>
