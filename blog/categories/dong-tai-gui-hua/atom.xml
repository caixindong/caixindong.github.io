<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 动态规划 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/dong-tai-gui-hua/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-04-06T23:16:54+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Word Break 问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/03/01/ios68/"/>
    <updated>2016-03-01T20:40:48+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/03/01/ios68</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>给一串字符串和一个字典，判断这个字符串是否能够拆分成字典里面的词</p>

<h4>例子</h4>

<p>s = &ldquo;wordbreakproblem&rdquo;  <br/>
dict = [&ldquo;word&rdquo;,&ldquo;break&rdquo;,&ldquo;problem&rdquo;,&ldquo;big&rdquo;,&ldquo;other&rdquo;]  <br/>
s 可以拆分成"word",&ldquo;break&rdquo;,&ldquo;problem&rdquo;</p>

<h2>做法</h2>

<p><code>1.</code> 初始化一个数组ve，假设字符串为"wordbreakproblem"，字典为[&ldquo;word&rdquo;,&ldquo;break&rdquo;,&ldquo;problem&rdquo;,&ldquo;big&rdquo;,&ldquo;other&rdquo;]，ve[1] = &ldquo;"，表示字符串的子串"w"没有符合字典的单词，ve[4] = "word&rdquo;,表示字符串子串"word"有第一个符合字典的单词"word",ve[8] = &ldquo;break&rdquo;,表示字符串子串"wordbreak"有第二个符合字典的单词"break"（因为word已经在之前记录了，所以在该子串不要记录）；      <br/>
<code>2.</code> 遍历取字符串的子串，如果子串存在字典里面的单词，就在对应子串记录该单词，已经记录的单词就不再记录；</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;unordered_set&gt;
#include &lt;vector&gt;
using namespace std;


class Solution {
public:
    bool wordBreak(string s, unordered_set&lt;string&gt;&amp; wordDict) {
        vector&lt;string&gt; ve;
        ve.resize(s.length()+1, "");
        for (int i=0; i&lt;=s.length(); i++) {
            string word = s.substr(0,i);
            if (wordDict.count(word)&gt;0) {
                ve[i] = word;
            }else{
                for (int j = 0; j&lt;i; j++) {
                    if (ve[j]!="") {
                        string word = s.substr(j,i-j);
                        if (wordDict.count(word)&gt;0) {
                            ve[i] = word;
                            break;
                        }
                    }
                }

            }

        }
        if (ve[s.length()]=="") {
            return false;
        }else{
            return true;
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图多源最短路径问题(Floyd算法)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/29/ios67/"/>
    <updated>2016-02-29T21:54:48+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/29/ios67</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>求图多源最短路径问题有一种简洁优雅的算法&ndash;Floyd算法。</p>

<h2>做法</h2>

<p><code>1.</code> 定义一个二维数组dist，dist[i][j]代表i到j的最短路径，如果i和j不可达，就初始化为无穷大，为了方便计算，我这里设为9999。  <br/>
<code>2.</code> 定义一个二维数组next，next[i][j]代表i到j这条路径中i的下一个站点，如果i和j不可达，就初始化为-1。  <br/>
<code>3.</code> 我们假设所有点经过k一定会到达另一个点，i到j如果可达，那么它有两条路径i->j和i->k—>j，我们通过比较这两条路径的大小来决定dist[i][j]的值，我们可以转化为一个动态方程来理解下：  <br/>
dist[i][j] = Min{dist[i][j],dist[i][k]+dist[k][j]}  <br/>
<code>4.</code> 同时我们还要记录next[i][j]的值，如果经过k的路径比较短，那么next[i][j] = next[i][k]</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

/**
 * 利用了动态规划
 * 时间复杂度为O(n^3)
 **/
void floyd(vector&lt;vector&lt;int&gt;&gt; &amp;dist,vector&lt;vector&lt;int&gt;&gt; &amp;next){
    size_t size = dist.size();
    for (int k = 0; k&lt;size; k++) {
        for (int i = 0; i &lt;size; i++) {
            for (int j = 0; j&lt;size; j++) {
                if (dist[i][k]+dist[k][j]&lt;dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
    }
}


void printPath(int i,int j,vector&lt;vector&lt;int&gt;&gt; &amp;next){
    if (next[i][j]==-1) {
        cout&lt;&lt;i&lt;&lt;" to "&lt;&lt;j&lt;&lt;" no path"&lt;&lt;endl;
        return;
    }
    cout&lt;&lt;i;
    while (i!=j) {
        i = next[i][j];
        cout&lt;&lt;"-&gt;"&lt;&lt;i;
    }
    cout&lt;&lt;endl;
}

int main(int argc, const char * argv[]) {
    vector&lt;vector&lt;int&gt;&gt; dist =
    {
        {0,9999,-2,9999},
        {4,0,3,9999},
        {9999,9999,0,2},
        {9999,-1,9999,0}

    };

    vector&lt;vector&lt;int&gt;&gt; next =
    {
        {-1,-1,2,-1},
        {0,-1,2,-1},
        {-1,-1,-1,3},
        {-1,1,-1,-1}
    };

    floyd(dist, next);

    for (int i = 0; i&lt;dist.size(); i++) {
        for (int j = 0; j&lt;dist.size(); j++) {
            cout&lt;&lt;dist[i][j]&lt;&lt;" ";
        }
        cout&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    for (int i = 0; i&lt;dist.size(); i++) {
        for (int j = 0; j&lt;dist.size(); j++) {
            printPath(i, j, next);
        }
        cout&lt;&lt;endl;
    }
    cout&lt;&lt;endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最长公共子串]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/26/ios64/"/>
    <updated>2016-02-26T16:02:00+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/26/ios64</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>它比最长公共子序列多了一个要求，就是要求子串是连续的，做法跟最长公共子序列的做法大致相同，只是在一处判断的处理改变了。</p>

<h2>做法</h2>

<p>定义一个二维数组C[i][j],记录str1(0~i)和str2(0~j)的最长公共子串。  <br/>
定义一个max，记录填表过程中出现的最大值。</p>

<h5>动态方程</h5>

<p>if str1[i] == str2[j]  <br/>
    c[i][j] = c[i-1][j-1] + 1;  <br/>
if str1[i] != str2[j]  <br/>
    c[i][j] = 0; //因为i和j位置上面的字符不等，那么到该位置公共子串就不连续，所以此时的最长公共子串的长度为0</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;

int lcs(char a[],char b[],int n,int m){
    if (n==0||m==0) {
        return 0;
    }else{
        int count[n+1][m+1];
        int max = 0;
        memset(count, 0, sizeof(count));
        for (int i=1; i&lt;=n; i++) {
            for (int j=1; j&lt;=m; j++) {
                if (a[i-1]==b[j-1]) {
                    count[i][j] = count[i-1][j-1]+1;
                    if (count[i][j]&gt;max) {
                        max = count[i][j];
                    }
                }else{
                    count[i][j] = 0;
                }
           }
        }
        return max;
    }

}




int main(int argc, const char * argv[]) {
    char a[] = "abccbd";
    char b[] = "bbccbd";
    cout&lt;&lt;lcs(a,b,6,6)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[斐波那契数列]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/24/ios61/"/>
    <updated>2016-02-24T18:29:04+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/24/ios61</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci[1]  ），指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）</p>

<h2>求斐波那契数列中第n个数</h2>

<h3>递归解法(缺点:时间复杂度很大，非多项式时间)</h3>

<pre><code class="C++">unsigned long long fb(int n){
    if (n&lt;2) {
        return n;
    }else{
        return fb02(n-1)+fb02(n-2);
    }

}
</code></pre>

<h3>动态规划解法(时间复杂度为O(n))</h3>

<pre><code class="C++">unsigned long long fb(int n){
    if (n&lt;2) {
        return n;
    }else{
        unsigned long long* a = new unsigned long long[n+1];
        a[0] = 0;
        a[1] = 1;
        for (int i = 2; i&lt;=n; i++) {
            a[i] = a[i-1]+a[i-2];
        }
        return a[n];
    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[01背包问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/24/ios60/"/>
    <updated>2016-02-24T16:54:00+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/24/ios60</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>已知:有一个容量为W的背包和N件物品，第i件物品的重量是weight[i]，收益是cost[i]。  <br/>
限制:每种物品只有一件，可以选择放或者不放  <br/>
问题:在不超过背包容量的情况下，最多能获得多少价值或收益</p>

<h2>算法思路</h2>

<p>我们定义一个数据结构f[i][j],它代表前i个物品在j容量下的最大价值。  <br/>
问题可以转化为解决这样的一个子问题，前i-1件物品已放入背包中，我们只考虑第i件物品的放入情况，如果不放则f[i][j] = f[i-1][j]；如果放入则f[i][j] = f[i-1][j-weight[i]]+cost[i],我们通过比较这两种情况f值得大小，来决定这件物品该不该放入</p>

<h2>代码如下</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;climits&gt;
using namespace std;

int MAX(int a,int b){
    return a&gt;b?a:b;
}

/**
 * 时间复杂度为O(N*W)
 * 空间复杂度为O(N*W)
 **/
int _01Package(int* weight,int* cost, int N, int W){
    int f[N+1][W+1];
    memset(f, 0, sizeof(f));
    for (int i=1; i&lt;=N; i++) {
        for (int j = 0; j &lt;=W; j++) {
            f[i][j] = f[i-1][j];
            if (weight[i]&lt;=j) {
                f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]+cost[i]);
            }
        }
    }
    return f[N][W];
}



int main(int argc, const char * argv[]) {
    const int N = 3;//物品个数
    const int V = 5;//背包最大容量
    int weight[N + 1] = {0,3,2,2};//物品重量
    int value[N + 1] = {0,5,10,20};//物品价值
    cout&lt;&lt;_01FillPackage02(weight, value, N, V)&lt;&lt;endl;
    return 0;
}
</code></pre>

<h2>优化空间复杂度</h2>

<pre><code class="C++">/**
 * 优化空间复杂度
 * 空间复杂度为O(W)
 **/
int _01Package02(int* weight,int* cost, int N,int W){
    int f[W+1];
    memset(f, 0, sizeof(f));
    for (int i=1; i&lt;=N; i++) {
        for (int j = W; j&gt;=weight[i]; j--) {
            f[j] = MAX(f[j], f[j-weight[i]]+cost[i]);
        }
    }
    return f[W];
}
</code></pre>

<p>逆序枚举容量的原因：
上面那种做法实际上是根据方程f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]演化而来，当到达第i次循环时，在计算f[j]之间，f[j]已经保存上次循环求得的f值，即实际上在计算f[j]之前，f[j] = f[i-1][j],如果是顺序枚举容量，则此时f[j-weight[i]]+cost[i]实际上是f[i][j-weight[i]]+cost[i],则不符合题意，其实相当于重复装入某件物品，如果是解决完全背包问题，顺序枚举容量是最简洁的解决方案。</p>

<h2>问题延伸</h2>

<p>当前问题不要求把背包装满，如果把背包装满，那怎么解决呢？  <br/>
其实解法跟上面问题的解法一样，只是在f数组的初始化上面有所不同。要求把背包装满，只有容量为0的背包时有合法解，价值为0，其他的容量均没有合法解，属于未定义状态，应该被复制为负无穷。</p>

<h4>代码实现</h4>

<pre><code class="C++">int _01FillPackage(int* weight,int* cost, int N, int W){
    int f[N+1][W+1];
    //注意初始化
    for (int i=0; i&lt;=N; i++) {
        for (int j = 0; j&lt;=W; j++) {
            f[i][j] = INT_MIN;
        }
    }

    for (int i=0; i&lt;=N; i++) {
        f[i][0] = 0;
    }
    for (int i=1; i&lt;=N; i++) {
        for (int j = 0; j &lt;=W; j++) {
            f[i][j] = f[i-1][j];
            if (weight[i]&lt;=j) {
                f[i][j] = MAX(f[i-1][j], f[i-1][j-weight[i]]+cost[i]);
            }
        }
    }
    return f[N][W];
}

int _01FillPackage02(int* weight,int* cost, int N,int W){
    int f[W+1];
    //注意初始化
    for (int i = 0; i&lt;=W;i++) {
        f[i] = INT_MIN;
    }
    f[0] = 0;
    for (int i=1; i&lt;=N; i++) {
        for (int j = W; j&gt;=weight[i]; j--) {
            f[j] = MAX(f[j], f[j-weight[i]]+cost[i]);
        }
    }
    return f[W];
}
</code></pre>
]]></content>
  </entry>
  
</feed>
