<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/shu/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-02-11T13:51:07+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二叉树的DFS遍历(递归)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/11/ios40/"/>
    <updated>2016-02-11T13:40:04+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/11/ios40</id>
    <content type="html"><![CDATA[<h2>二叉(搜索)树的实现</h2>

<p>代码如下：</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct treeNode {
    int val;
    int position;
    treeNode* left;
    treeNode* right;
    treeNode(int val,int position){
        this-&gt;val = val;
        this-&gt;position = position;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BinarySearchTree {
    treeNode* root = nullptr;

    void add(int value,int position,treeNode* node){
        if (node==nullptr) {
            throw "树为空";
        }

        if (value == node-&gt;val) {
            return;
        }else if(value &lt; node-&gt;val){
            if (node-&gt;left==nullptr) {
                node-&gt;left = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;left);
            }
        }else{
            if (node-&gt;right==nullptr) {
                node-&gt;right = new treeNode(value,position);
            }else{
                add(value, position, node-&gt;right);
            }
        }
    }
public:
    /**
     *添加节点
     **/
    void add(int value,int position){
        if (root==nullptr) {
            root = new treeNode(value,position);
        }else{
            add(value, position, root);
        }
    }

};
</code></pre>

<h2>先序遍历</h2>

<p>代码如下：</p>

<pre><code class="C++">    void DFSTravel(treeNode* node){
        if (node==nullptr) {
            return;
        }else{
            //前序遍历
            cout&lt;&lt;node-&gt;val&lt;&lt;endl;
            DFSTravel(node-&gt;left);
            DFSTravel(node-&gt;right);           
        }
    }
</code></pre>

<h2>中序遍历</h2>

<p>代码如下：</p>

<pre><code class="C++">    void DFSTravel(treeNode* node){
        if (node==nullptr) {
            return;
        }else{
           //中序遍历
            DFSTravel(node-&gt;left);
            cout&lt;&lt;node-&gt;val&lt;&lt;endl;
            DFSTravel(node-&gt;right);           
        }
    }
</code></pre>

<h2>后序遍历</h2>

<p>代码如下：</p>

<pre><code class="C++">    void DFSTravel(treeNode* node){
        if (node==nullptr) {
            return;
        }else{           
            //后序遍历
            DFSTravel(node-&gt;left);
            DFSTravel(node-&gt;right);
            cout&lt;&lt;node-&gt;val&lt;&lt;endl;
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
