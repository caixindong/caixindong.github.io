<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/shu/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-03-05T20:45:29+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[判断一颗树是否是平衡二叉树]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios47/"/>
    <updated>2016-02-14T11:21:07+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios47</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>判断一个树是否是平衡二叉树，何为平衡二叉树，就是它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>

<h2>做法</h2>

<p>由要求可看出判断一颗树是否是平衡二叉树的依据就是每个节点的左右子树的高度(深度)差的绝对值不超过1，那么我们可以通过计算节点的深度来判断，那如何计算节点的深度呢？我们发现树有个特点就是父节点的深度是子节点深度的最大值加1，由这个特点，我们可以计算节点的深度</p>

<h2>代码如下</h2>

<p>我提供两种代码思路</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;


  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };

class Solution {
public:

    /**
     *方法一
     * 传统方法，计算每个节点的深度判断，时间复杂度为O(n^2)
     **/
    int depth(TreeNode* node){
        if (node==nullptr) {
            return 0;
        }else if(!node-&gt;left&amp;&amp;!node-&gt;right){
            return 1;
        }
        else{
            int leftD = depth(node-&gt;left);
            int rightD = depth(node-&gt;right);
            return 1+(leftD&gt;rightD?leftD:rightD);
        }
    }
    bool isBalanced(TreeNode* root) {
        if (root==nullptr) {
            return true;
        }else{
            int leftD = depth(root-&gt;left);
            int rightD = depth(root-&gt;right);
            if (abs(leftD-rightD)&gt;1) {
                return false;
            }else{
                return isBalanced(root-&gt;left)&amp;&amp;isBalanced(root-&gt;right);
            }
        }
    }

    /**
     *方法二
     * 边计算深度边判断，时间复杂度为O(n)
     **/
    int depth2(TreeNode* node){
        if (node==nullptr) {
            return 0;
        }else{
            int leftD = depth2(node-&gt;left);
            int rightD = depth2(node-&gt;right);
            if (leftD==-1||rightD==-1||abs(leftD-rightD)&gt;1) {
                return -1;
            }else{
                return (leftD&gt;rightD?leftD:rightD)+1;
            }
        }
    }
    bool isBanlanced2(TreeNode* root){
        if (root==nullptr) {
            return true;
        }else{
            if (depth2(root)==-1) {
                return false;
            }else{
                return true;
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[表达式求值问题]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios46/"/>
    <updated>2016-02-13T14:45:50+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios46</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>我们给出一个表达式，将它转化为逆波兰式，传给树求值，例如1+2+3 转化为 12+3+</p>

<h2>做法</h2>

<p><code>匹配：</code> 初始化一个栈stack，然后遍历这个逆波兰式的字符串，如果遇到数字，则以这个数字的值生成一个新的树节点，将这个节点入栈；如果遇到操作符，就以操作符为值生成一个新的树节点，弹栈弹出一个节点作为该新节点的右孩子节点，再弹出一个节点作为该新节点的左孩子节点，最后将该新节点入栈。遍历结束后，判断栈里的元素个数是否为1，如果为1则匹配成功；如果不为1则逆波兰式是非法的。  <br/>
<code>求值：</code> 遍历树进行求值，具体做法看代码。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;
struct treeNode{
    char val;
    treeNode* left;
    treeNode* right;
    treeNode(char val){
        this-&gt;val = val;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BSTree{
    treeNode* root;
public:
    BSTree(){
        root = nullptr;
    }
    /**
     *解析表达式字符串
     **/
    void parse(char str[]){
        const char* p = str;
        stack&lt;treeNode*&gt; stack;
        while (*p != '\0') {
            if (*p&gt;='0' &amp;&amp; *p&lt;='9') {
                stack.push(new treeNode(*p));
            }else{
                treeNode* newNode = new treeNode(*p);
                treeNode* rightNode = stack.top();
                stack.pop();
                newNode-&gt;right = rightNode;
                treeNode* leftNode = stack.top();
                stack.pop();
                newNode-&gt;left = leftNode;
                stack.push(newNode);
            }
            p++;
        }
        if (stack.size()!=1) {
            cout&lt;&lt;"Illegal expression";
            root = nullptr;
        }else{
            root = stack.top();
        }


    }
    /**
     *计算表达式的值
     **/
    int evaluate(){
        if (root==nullptr) {
            cout&lt;&lt;" ";
            //如果表达式不规范返回int最小值
            return numeric_limits&lt;int&gt;::min();
        }else{
            return evaluate(root);
        }
    }
private:
    int evaluate(treeNode* node){
        switch (node-&gt;val) {
            case '+':
                return evaluate(node-&gt;left)+evaluate(node-&gt;right);

            case '-':
                return evaluate(node-&gt;left)-evaluate(node-&gt;right);

            case '*':
                return evaluate(node-&gt;left)*evaluate(node-&gt;right);

            case '/':
                return evaluate(node-&gt;left)/evaluate(node-&gt;right);
                ;
                //叶子节点
            default:
                return node-&gt;val - '0';
                ;
        }

    }
};

int main(int argc, const char * argv[]) {
    BSTree tree;
    tree.parse("44+22+/");
    cout&lt;&lt;tree.evaluate()&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的BFS遍历(非递归)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios45/"/>
    <updated>2016-02-13T14:35:24+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios45</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>我们可以利用队列先进先出的特点对我们树进行广度优先遍历。</p>

<h2>代码实现：</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

template&lt;class T&gt;
struct TreeNode {
    T val;
    TreeNode&lt;T&gt;* left;
    TreeNode&lt;T&gt;* right;
    TreeNode(T val){
        this-&gt;val = val;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};

template&lt;class T&gt;
void BFSTravel(TreeNode&lt;T&gt;* node){
    queue&lt;TreeNode&lt;T&gt;*&gt; queue;
    queue.push(node);
    while (!queue.empty()) {
        TreeNode&lt;T&gt;* currentNode = queue.front();
        cout&lt;&lt;currentNode-&gt;val&lt;&lt;endl;
        queue.pop();
        if (currentNode-&gt;left) {
            queue.push(currentNode-&gt;left);
        }
        if(currentNode-&gt;right){
            queue.push(currentNode-&gt;right);
        }
    }

}

int main(int argc, const char * argv[]) {
    TreeNode&lt;int&gt;* root = new TreeNode&lt;int&gt;(10);
    TreeNode&lt;int&gt;* node1 = new TreeNode&lt;int&gt;(1);
    TreeNode&lt;int&gt;* node2 = new TreeNode&lt;int&gt;(2);
    TreeNode&lt;int&gt;* node3 = new TreeNode&lt;int&gt;(3);
    TreeNode&lt;int&gt;* node4 = new TreeNode&lt;int&gt;(4);
    root-&gt;left = node1;
    root-&gt;right = node3;
    node3-&gt;left = node2;
    node3-&gt;right = node4;
    BFSTravel(root);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的BFS遍历(递归)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/13/ios44/"/>
    <updated>2016-02-13T14:01:23+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/13/ios44</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>BFS,即广度优先遍历，做法就是逐层遍历</p>

<h2>代码实现：</h2>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct treeNode {
    int val;
    int position;
    treeNode* left;
    treeNode* right;
    treeNode(int val,int position){
        this-&gt;val = val;
        this-&gt;position = position;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};

class BinaryTree {
    int max(int x,int y){
        return x&gt;y?x:y;
    }
    /**
    *计算每个结点的深度
    **/
    int depth(treeNode* node){
        if (node==nullptr) {
            return 0;
        }else{
            int leftD = depth(node-&gt;left);
            int rightD = depth(node-&gt;right);
            return max(leftD, rightD)+1;
        }
    }
public:
    treeNode* root = nullptr;

    /**
     *获取深度
     **/
    int depth(){
        return depth(root);
    }


    /**
     * 广度优先遍历
     **/
    void BFSTravel(){
        int dep = depth();
        for (int i=0; i&lt;dep; i++) {
            printLevel(root, i);
        }
    }


    /**
     *打印每一层
     **/
    void printLevel(treeNode* node, int level){
        if (node==nullptr) {
            return;
        }
        if (level==0) {
            cout&lt;&lt;node-&gt;val&lt;&lt;endl;
        }else{
            printLevel(node-&gt;left, level-1);
            printLevel(node-&gt;right, level-1);
        }
    }

    };
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的DFS遍历(非递归)]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/11/ios41/"/>
    <updated>2016-02-11T13:54:08+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/11/ios41</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>递归是利用函数压栈实现，如果我们要将递归的写法转化为非递归写法，自然需要利用栈来实现。</p>

<h2>二叉树的实现</h2>

<p>代码如下：</p>

<pre><code class="C++">#include &lt;iostream&gt;
using namespace std;
struct treeNode {
    int val;
    int position;
    treeNode* left;
    treeNode* right;
    treeNode(int val,int position){
        this-&gt;val = val;
        this-&gt;position = position;
        this-&gt;left = nullptr;
        this-&gt;right = nullptr;
    }
};


class BinaryTree {

public:
    treeNode* root = nullptr;
    BinartTree(){
        root = nullptr;
    }
    void pre_order();
    void mid_order();
    void back_order()
};
</code></pre>

<h2>前序遍历非递归写法</h2>

<p>代码如下：</p>

<pre><code class="C++">    /**
     *前序遍历
     **/
    void BinaryTree::pre_order(){
        treeNode* currentNode = root;
        std::stack&lt;treeNode*&gt; stack;
        while (currentNode||!stack.empty()) {
            if (currentNode) {
                std::cout&lt;&lt;currentNode-&gt;val&lt;&lt;std::endl;
                stack.push(currentNode);
                currentNode = currentNode-&gt;left;
            }else{
                currentNode = stack.top();
                stack.pop();
                currentNode = currentNode-&gt;right;
            }
        }


    }
</code></pre>

<h2>中序遍历非递归写法</h2>

<p>代码如下：</p>

<pre><code class="C++">    /**
     *中序遍历
     **/
    void BinaryTree::mid_order(){
        treeNode* currentNode = root;
        std::stack&lt;treeNode*&gt; stack;
        while (!stack.empty()||currentNode) {
            if (currentNode) {
                stack.push(currentNode);
                currentNode = currentNode-&gt;left;
            }else{
                currentNode = stack.top();
                stack.pop();
                std::cout&lt;&lt;currentNode-&gt;val&lt;&lt;std::endl;
                currentNode = currentNode-&gt;right;
            }
        }

    }
</code></pre>

<h2>后序遍历非递归写法</h2>

<p>代码如下：</p>

<pre><code class="C++">    /**
     *后序遍历
     **/
    void BinaryTree::back_order(){
        treeNode* currentNode = root;
        treeNode* lastVisitNode = nullptr;
        std::stack&lt;treeNode*&gt; stack;

        while (currentNode) {
            stack.push(currentNode);
            currentNode = currentNode-&gt;left;
        }
        while (!stack.empty()) {
            currentNode = stack.top();
            stack.pop();
            if (currentNode-&gt;right==nullptr||currentNode-&gt;right==lastVisitNode) {
                std::cout&lt;&lt;currentNode-&gt;val&lt;&lt;std::endl;
                lastVisitNode = currentNode;
            }else{
                stack.push(currentNode);
                currentNode = currentNode-&gt;right;
                while (currentNode) {
                    stack.push(currentNode);
                    currentNode = currentNode-&gt;left;
                }
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
