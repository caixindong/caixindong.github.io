<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 回文问题 | Cool Guy]]></title>
  <link href="http://caixindong.github.io/blog/categories/hui-wen-wen-ti/atom.xml" rel="self"/>
  <link href="http://caixindong.github.io/"/>
  <updated>2016-03-30T23:31:42+08:00</updated>
  <id>http://caixindong.github.io/</id>
  <author>
    <name><![CDATA[Xindong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最长回文字符串]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios50/"/>
    <updated>2016-02-14T22:36:55+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios50</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>给定一个字符串，求它的最长回文子字符串</p>

<h2>做法</h2>

<p>最长回文字符串的长度可能为奇数，也可能为偶数，所以我们可以假定这两种情况来求。我们采用中间拓展法来获取回文子串：由一个字符向它的左右两边拓展，当左右相等时继续拓展，当不等时停止拓展，记录此时的长度n，获得一个n长度的回文子串。然后对下一个字符继续用中间拓展法。当遍历完字符串所有字符后，选取长度最大的回文子串。</p>

<h2>代码实现</h2>

<pre><code class="C++">#include &lt;string&gt;
using namespace std;
class Solution {
public:
    string longestPalindrome(string s) {
        int n = (int)s.length();
                if (n==1) {
            return s;
        }
        //记录最长的回文子串长度
        int max = 0;
        int maxLeft = 0;
        int maxRight = 0;
        for(int i=0;i&lt;n;i++){
            //假定回文子串的长度为奇数
            int start = i-1;
            int end = i+1;
            int len = 1;
            int left = start;
            int right = end;
            while (start&gt;=0&amp;&amp;end&lt;n) {
                if (s[start]==s[end]) {
                    len = len+2;
                    left = start;
                    right = end;
                    start--;
                    end++;
                }else{
                    break;
                }
            }
            if (len&gt;max) {
                max = len;
                maxLeft = left;
                maxRight = right;
            }
            //假定回文子串的长度为偶数
            start = i;
            end = i+1;
            len = 0;
            left = start;
            right = end;
            while (start&gt;=0&amp;&amp;end&lt;n) {
                if (s[start]==s[end]) {
                    len = len+2;
                    left = start;
                    right = end;
                    start--;
                    end++;
                }else{
                    break;
                }
            }
            if (len&gt;max) {
                max = len;
                maxLeft = left;
                maxRight = right;
            }
        }
        return s.substr(maxLeft,maxRight-maxLeft+1);
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断是否是回文字符串]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios49/"/>
    <updated>2016-02-14T13:41:59+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios49</id>
    <content type="html"><![CDATA[<h2>要求</h2>

<p>判断是否是回文字符串</p>

<h2>做法</h2>

<p>先将字符串转化为小写字符串，接着初始化一个头指针和尾指针，遍历字符串，遍历的时候注意字符是否是‘1’~‘9’或‘a’~&lsquo;z'，如果不是就跳过遍历。如果头尾指针遍历到的字符不同就返回false，否则继续遍历。</p>

<h2>代码实现</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
using namespace::std;
class Solution {
public:

    /**
    * 判断是否是1~9或a~b之中的字符
    **/
    bool isNormalChar(char c){
        if (('a'&lt;=c&amp;&amp;c&lt;='z')||('0'&lt;=c&amp;&amp;c&lt;='9')) {
            return true;
        }
        return false;
    }

    bool isPalindrome(string s) {
        if (s.length()&lt;=1) {
            return true;
        }
        //将字符串中的大写转化为小写
        transform(s.begin(), s.end(), s.begin(),::tolower);
        int n = (int)s.length();
        int i = 0;
        int j = n-1;
        while (i&lt;j) {
            if (s[i]==s[j]) {
                i++;
                j--;
            }else{
                if (!isNormalChar(s[i])) {
                    i++;
                }else if(!isNormalChar(s[j])){
                    j--;
                }else{
                    return false;
                }
            }
        }
        return true;
    }
};
int main(int argc, const char * argv[]) {
    Solution* s = new Solution();
    cout&lt;&lt;s-&gt;isPalindrome("ab")&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断是否是回文数字]]></title>
    <link href="http://caixindong.github.io/blog/2016/02/14/ios48/"/>
    <updated>2016-02-14T12:07:13+08:00</updated>
    <id>http://caixindong.github.io/blog/2016/02/14/ios48</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>什么是回文？  <br/>
回文就是正着读、反着读都一样的字符串，例如：“心连心”、“abccba”、“bcdcb”、“123321” 这些都是回文。</p>

<h2>要求</h2>

<p>判断一个数字是否是回文数字</p>

<h2>做法</h2>

<p>判断数字的每一位是否对称</p>

<h2>代码如下</h2>

<pre><code class="C++">
#include &lt;iostream&gt;
#include &lt;math.h&gt;
using namespace std;
class Solution {
public:
    /**
    *计算数字的位数
    **/
    int wei(int x){
        int count = 0;
        while (x&gt;0) {
            x = x/10;
            count++;
        }
        return count;
    }

    /**
    *   判断
    **/
    bool isPalindrome(int x) {
        if (x&lt;0) {
            return false;
        }
        if (x&gt;=0&amp;&amp;x&lt;10) {
            return true;
        }else{
            int n = wei(x);
            int t = (int)pow(10,n-1);
            int tmp = x;
            int half = n/2;
            for(int i=0;i&lt;half;i++){
                if (x/t%10==tmp%10) {
                    t = t/10;
                    tmp = tmp/10;
                }else{
                    return false;
                }
            }
            return true;
        }
    }
};

int main(int argc, const char * argv[]) {
    Solution* s =  new Solution();
    cout&lt;&lt;s-&gt;isPalindrome(1221)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
